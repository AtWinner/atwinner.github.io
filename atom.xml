<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡杨林</title>
  <subtitle>献给胡胡和阳阳</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-16T08:59:16.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>胡胡</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 使用MarsDaemon进程常驻</title>
    <link href="http://yoursite.com/2016/12/16/MarsDaemon/"/>
    <id>http://yoursite.com/2016/12/16/MarsDaemon/</id>
    <published>2016-12-16T09:01:15.463Z</published>
    <updated>2016-12-16T08:59:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在特定的业务场景中，我们可能会需要app在后台坐一些事情，比如上传数据之类的操作，并且希望这种操作及时在程序退出之后依然可以继续进行。因此也就理所当然的想到了使用Service进行处理。<strong>但是</strong>，在特定条件（app进入后台+设备内存不足+进程占用的内存足够大）的情况下，Service会非常容易在几分钟内被系统干掉，因此提高Service的存活率至关重要。</p>
<h2 id="一种无效的做法"><a href="#一种无效的做法" class="headerlink" title="一种无效的做法"></a>一种无效的做法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">	Log.e(TAG, <span class="string">"onDestory"</span>);</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, Service.class);</div><div class="line">       startService(intent);</div><div class="line">       <span class="keyword">super</span>.onDestroy();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>此方法企图利用Service是生命周期去调用其本身，事实证明这种方法是无效的，在进程被杀死时，Service根本不会执行onDestroy就被直接清出内存了，因此靠自身的力量提高存活率的方式也就不可行了。</p>
<h2 id="Marsdaemon"><a href="#Marsdaemon" class="headerlink" title="Marsdaemon"></a>Marsdaemon</h2><ul>
<li>项目地址：<a href="https://github.com/Marswin/MarsDaemon" target="_blank" rel="external">https://github.com/Marswin/MarsDaemon</a></li>
<li>原理分析：<a href="http://blog.csdn.net/marswin89/article/details/50917098" target="_blank" rel="external">http://blog.csdn.net/marswin89/article/details/50917098</a><br>下面主要讲讲用法</li>
</ul>
<h3 id="从Github获取项目源码"><a href="#从Github获取项目源码" class="headerlink" title="从Github获取项目源码"></a>从<a href="https://github.com/Marswin/MarsDaemon" target="_blank" rel="external">Github</a>获取项目源码</h3><p>导入项目之后<br><img src="http://oi9a3yd8k.bkt.clouddn.com/lib_marsdaemon.png" alt="项目目录"><br>之后不要忘记导入module<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">'*.jar'</span>], dir: <span class="string">'libs'</span>)</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    <span class="keyword">compile</span> <span class="keyword">project</span>(<span class="string">':LibMarsdaemon'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="使用Marsdaemon"><a href="#使用Marsdaemon" class="headerlink" title="使用Marsdaemon"></a>使用Marsdaemon</h3><h4 id="在manifest中声明2个进程分别包含一个Service和一个Receiver"><a href="#在manifest中声明2个进程分别包含一个Service和一个Receiver" class="headerlink" title="在manifest中声明2个进程分别包含一个Service和一个Receiver"></a>在manifest中声明2个进程分别包含一个Service和一个Receiver</h4><p>此处将process1作为主要进程，process2作为守护进程。MainService中执行主要的业务逻辑，Receiver1、GuardService、Receiver2都是额外创建的，里面不要做任何事情，都是空实现就好。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--守护进程--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">service</span></span></div><div class="line">	<span class="attr">android:name</span>=<span class="string">".ble.MainService"</span></div><div class="line">	<span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">	<span class="attr">android:exported</span>=<span class="string">"true"</span></div><div class="line">	<span class="attr">android:process</span>=<span class="string">":process1"</span> /&gt;</div><div class="line"><span class="tag">&lt;<span class="name">receiver</span></span></div><div class="line">	<span class="attr">android:name</span>=<span class="string">".guard.Receiver1"</span></div><div class="line">	<span class="attr">android:process</span>=<span class="string">":process1"</span> /&gt;</div><div class="line"><span class="tag">&lt;<span class="name">service</span></span></div><div class="line">	<span class="attr">android:name</span>=<span class="string">".guard.GuardService"</span></div><div class="line">	<span class="attr">android:process</span>=<span class="string">":process2"</span> /&gt;</div><div class="line"><span class="tag">&lt;<span class="name">receiver</span></span></div><div class="line">	<span class="attr">android:name</span>=<span class="string">".guard.Receiver2"</span></div><div class="line">	<span class="attr">android:process</span>=<span class="string">":process2"</span> /&gt;</div></pre></td></tr></table></figure></p>
<h4 id="处理Application"><a href="#处理Application" class="headerlink" title="处理Application"></a>处理Application</h4><p>由于我们的Application一般都会集成其他的Application，因此需要在attachBaseContext中初始化DaemonClient，然后调用onAttachBaseContext即可实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">XXXApplication</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> DaemonClient daemonClient;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.attachBaseContext(base);</div><div class="line">        daemonClient = <span class="keyword">new</span> DaemonClient(getDaemonConfigurations());</div><div class="line">        daemonClient.onAttachBaseContext(base);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> DaemonConfigurations <span class="title">getDaemonConfigurations</span><span class="params">()</span> </span>&#123;</div><div class="line">        DaemonConfigurations.DaemonConfiguration configuration1 = </div><div class="line">        <span class="keyword">new</span> DaemonConfigurations.DaemonConfiguration(</div><div class="line">                <span class="string">"com.hemaapp.znsh:process1"</span>,</div><div class="line">                MainService.class.getCanonicalName(),</div><div class="line">                Receiver1.class.getCanonicalName());</div><div class="line"></div><div class="line">        DaemonConfigurations.DaemonConfiguration configuration2 = </div><div class="line">        <span class="keyword">new</span> DaemonConfigurations.DaemonConfiguration(</div><div class="line">                <span class="string">"com.hemaapp.znsh:process2"</span>,</div><div class="line">                GuardService.class.getCanonicalName(),</div><div class="line">                Receiver2.class.getCanonicalName());</div><div class="line"></div><div class="line">        DaemonConfigurations.DaemonListener listener = <span class="keyword">new</span> MyDaemonListener();</div><div class="line">        <span class="comment">//return new DaemonConfigurations(configuration1, configuration2);//listener可以是null</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DaemonConfigurations(configuration1, configuration2, listener);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDaemonListener</span> <span class="keyword">implements</span> <span class="title">DaemonConfigurations</span>.<span class="title">DaemonListener</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPersistentStart</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDaemonAssistantStart</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onWatchDaemonDaed</span><span class="params">()</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="处理其他Class"><a href="#处理其他Class" class="headerlink" title="处理其他Class"></a>处理其他Class</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuardService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Service.START_NOT_STICKY;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver1</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver2</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="在Android4-4中"><a href="#在Android4-4中" class="headerlink" title="在Android4.4中"></a>在Android4.4中</h4><ul>
<li>手动Kill进程时，可以明显的在LogCat中看到Service被重新启动了，提高的Service的存活率。<h4 id="在Android5-中"><a href="#在Android5-中" class="headerlink" title="在Android5+中"></a>在Android5+中</h4></li>
<li>手动Kill进程时，Service不会被重新启动，Application依旧被彻底杀死了。</li>
<li>小米2+Android5.0，长时间后台运行测试中，可以连续半小时以上不间断发送网络请求，效果明显。</li>
<li>其他主流手机，由于大多配置了2G以上的内存，因此暂时没有看到Service被清理的现象发生。</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>使用Marsdaemon提高Service存活率的方式虽然有一定效果，但是在Android5.0之后的版本中，并不可靠，并且还有如下几个缺陷。</p>
<ul>
<li>即使Service存活，Application中的信息不一定全部存在，这就会导致发送网络请求失败的情况发生，做了无用功。</li>
<li>营造了一个恶劣的运行环境，这种方式也是Android所不提倡的。</li>
</ul>
<p>因此，Marsdaemon不应是大家频繁使用的功能，特殊情况下可以应急即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在特定的业务场景中，我们可能会需要app在后台坐一些事情，比如上传数据之类的操作，并且希望这种操作及时在程序退出之后依然可以继续进行。因此也
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Github+Hexo+Material搭建私人博客</title>
    <link href="http://yoursite.com/2016/12/15/%E4%BD%BF%E7%94%A8Github+Hexo+Material%E6%90%AD%E5%BB%BA%E7%A7%81%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/12/15/使用Github+Hexo+Material搭建私人博客/</id>
    <published>2016-12-15T14:02:27.250Z</published>
    <updated>2016-12-16T02:33:42.151Z</updated>
    
    <content type="html"><![CDATA[<p>在一次偶然的机会中，发现了有人演示的个人博客很漂亮，域名就是xxxx.github.io，遂生出了研究一下使用Github建立个人博客的念头，本质上的原理还是用Github托管了静态网页的源代码，并将其显示在前端。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>身为一名程序猿，记录自己的成长是至关重要的，而写博客是一种比较好的记录方式。你可以选择博客园、开源中国、简书等等，当然自己搭建一个博客站点也是可以的。本篇文章将会手把手的教你使用Github+Hexo搭建属于自己的博客，不需要自己搭建服务器，可以任意编辑内容和主题，简直爽歪歪了。</p>
<h2 id="关于Github"><a href="#关于Github" class="headerlink" title="关于Github"></a>关于Github</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>GitHub是基于git实现的代码托管。git可能是目前最好用的版本控制系统了，非常受欢迎。</li>
<li>GitHub可以免费使用，并且快速稳定。</li>
<li>Github上面的世界很精彩，用久了你的眼界会开阔很多。<h3 id="为什么要使用Github-Pages"><a href="#为什么要使用Github-Pages" class="headerlink" title="为什么要使用Github Pages"></a>为什么要使用Github Pages</h3></li>
<li>可以绑定你的域名(但暂时貌似只能绑定一个)。</li>
<li>简单快捷，使用Github Pages可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。</li>
</ul>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>在 Windows 环境下安装 <a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a>非常简单，仅须到官网下载安装文件并执行即可完成安装。<br><img src="http://oi9a3yd8k.bkt.clouddn.com/node_js.png" alt="安装Node.js"></p>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><ul>
<li>下载msysgit 安装即可</li>
<li>安装教程：<a href="http://jingyan.baidu.com/article/90895e0fb3495f64ed6b0b50.html" target="_blank" rel="external">如何在windows下安装GIT</a></li>
<li>Git入门教程：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="external">看廖雪峰大神就好</a></li>
</ul>
<h2 id="HEXO"><a href="#HEXO" class="headerlink" title="HEXO"></a>HEXO</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><p>再项目目录的文件夹下右键鼠标，点击Git Bash Here，输入npm命令即可安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>
<h3 id="Hexo初始化配置"><a href="#Hexo初始化配置" class="headerlink" title="Hexo初始化配置"></a>Hexo初始化配置</h3><p>安装完成后，根据自己建好的目录，执行以下操作。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div><div class="line">$ npm install</div></pre></td></tr></table></figure></p>
<p>安装 Hexo 完成后，文件目录显示如下<br><img src="http://oi9a3yd8k.bkt.clouddn.com/hexo_init.png" alt="Hexo安装完成"></p>
<h3 id="安装Hexo插件"><a href="#安装Hexo插件" class="headerlink" title="安装Hexo插件"></a>安装Hexo插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-index --save</div><div class="line">npm install hexo-generator-archive --save</div><div class="line">npm install hexo-generator-category --save</div><div class="line">npm install hexo-generator-tag --save</div><div class="line">npm install hexo-server --save</div><div class="line">npm install hexo-deployer-git --save</div><div class="line">npm install hexo-deployer-heroku --save</div><div class="line">npm install hexo-deployer-rsync --save</div><div class="line">npm install hexo-deployer-openshift --save</div><div class="line">npm install hexo-renderer-marked@0.2 --save</div><div class="line">npm install hexo-renderer-stylus@0.2 --save</div><div class="line">npm install hexo-generator-feed@1 --save</div><div class="line">npm install hexo-generator-sitemap@1 --save</div></pre></td></tr></table></figure>
<h3 id="本地查看效果"><a href="#本地查看效果" class="headerlink" title="本地查看效果"></a>本地查看效果</h3><p>执行下面语句，执行完即可登录localhost:4000查看效果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo server</div></pre></td></tr></table></figure></p>
<p><img src="http://oi9a3yd8k.bkt.clouddn.com/generate.png" alt="执行效果"></p>
<p>localhost:4000 效果展示<br><img src="http://oi9a3yd8k.bkt.clouddn.com/hexo_first_page.png" alt="执行效果"><br>至此，Hexo的环境搭建就完成了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在一次偶然的机会中，发现了有人演示的个人博客很漂亮，域名就是xxxx.github.io，遂生出了研究一下使用Github建立个人博客的念头，本质上的原理还是用Github托管了静态网页的源代码，并将其显示在前端。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/12/15/hello-world/"/>
    <id>http://yoursite.com/2016/12/15/hello-world/</id>
    <published>2016-12-15T09:51:52.283Z</published>
    <updated>2016-12-15T09:51:52.291Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
