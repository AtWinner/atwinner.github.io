<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Poplar</title>
  <subtitle>献给胡胡和杨杨，专注于Android开发</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://atwinner.github.io/"/>
  <updated>2017-01-23T03:40:37.112Z</updated>
  <id>https://atwinner.github.io/</id>
  
  <author>
    <name>Poplar Hu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Realm详解</title>
    <link href="https://atwinner.github.io/2017/01/19/android-realm/"/>
    <id>https://atwinner.github.io/2017/01/19/android-realm/</id>
    <published>2017-01-19T02:24:30.000Z</published>
    <updated>2017-01-23T03:40:37.112Z</updated>
    
    <content type="html"><![CDATA[<p>作者：郭霖</p>
<p>原文作者：<strong>带心情去旅行</strong></p>
<p>原文地址：<a href="http://www.jianshu.com/u/769d3d3a9d4b" target="_blank" rel="external">http://www.jianshu.com/u/769d3d3a9d4b</a></p>
<a id="more"></a>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Realm 是一个 MVCC （多版本并发控制）数据库，由 Y Combinator 公司在2014年7月发布一款支持运行在手机、平板和可穿戴设备上的嵌入式数据库，目标是取代SQLite。</p>
<p>Realm 本质上是一个嵌入式数据库，他并不是基于 SQLite 所构建的。它拥有自己的数据库存储引擎，可以高效且快速地完成数据库的构建操作。和 SQLite 不同，它允许你在持久层直接和数据对象工作。在它之上是一个函数式风格的查询api，众多的努力让它比传统的SQLite 操作更快 。详细介绍（如果进不去，可看第二个链接）：</p>
<ul>
<li><p><a href="https://realm.io/cn/news/jp-simard-realm-core-database-engine" target="_blank" rel="external">https://realm.io/cn/news/jp-simard-realm-core-database-engine</a></p>
</li>
<li><p><a href="https://www.zybuluo.com/pockry/note/453560" target="_blank" rel="external">https://www.zybuluo.com/pockry/note/453560</a></p>
</li>
</ul>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>如果在在使用它时候，连它的优势在哪都不知道的话就有点说不过去了。</p>
<ul>
<li><p><strong>易用</strong>：Ream 不是在SQLite基础上的ORM，它有自己的数据查询引擎。并且十分容易使用。</p>
</li>
<li><p><strong>快速</strong>：由于它是完全重新开始开发的数据库实现，所以它比任何的ORM速度都快很多，甚至比SLite速度都要快。</p>
</li>
<li><p><strong>跨平台</strong>：Realm 支持 iOS &amp; OS X (Objective‑C &amp; Swift) &amp; Android。我们可以在这些平台上共享Realm数据库文件，并且上层逻辑可以不用任何改动的情况下实现移植。</p>
</li>
<li><p><strong>高级</strong>：Ream支持加密，格式化查询，易于移植，支持JSON，流式api，数据变更通知等高级特性</p>
</li>
<li><p><strong>可视化</strong>：Realm 还提供了一个轻量级的数据库查看工具，在Mac Appstore 可以下载“Realm Browser”这个工具，开发者可以查看数据库当中的内容，执行简单的插入和删除数据的操作。（windows上还不清楚）</p>
</li>
</ul>
<h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><ul>
<li>目前不支持Android以外的Java</li>
<li>Android Studio &gt;= 1.5.1</li>
<li>较新的Android SDK版本</li>
<li>JDK version &gt;=7.</li>
<li>支持API 9(Android 2.3)以及之后的版本</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h3><p>在 project 的 build 中加入依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;io.realm:realm-gradle-plugins:2.2.1&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 module 中加入:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;realm-android&apos;</div></pre></td></tr></table></figure>
<p><strong>Realm从v1.0.0后，不支持Ecilpse，我们推荐使用Android Studio</strong></p>
<h3 id="创建model"><a href="#创建model" class="headerlink" title="创建model"></a>创建model</h3><p>创建一个 User 类，需要继承 RealmObject。支持 public, protected 和 private 的类以及方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="title">extend</span> <span class="title">RealmObject</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除了直接继承于 RealmObject 来声明 Realm 数据模型之外，还可以通过实现 RealmModel接口 并添加 <em>@RealmClass</em> 修饰符来声明。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RealmClass</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">RealmModel</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="支持的属性"><a href="#支持的属性" class="headerlink" title="支持的属性"></a>支持的属性</h4><p>boolean, byte, short, int, long, float, double, String, Date 和 byte[], RealmObject, RealmList&lt;? extends RealmObject&gt;</p>
<p>还支持 Boolean, Byte, Short, Integer, Long, Float 和 Double</p>
<p><strong>整数类型 short、int 和 long 都被映射到 Realm 内的相同类型（实际上为 long ）</strong></p>
<h5 id="PrimaryKey——表示该字段是主键"><a href="#PrimaryKey——表示该字段是主键" class="headerlink" title="@PrimaryKey——表示该字段是主键"></a><em>@PrimaryKey</em>——表示该字段是主键</h5><p>使用过数据库的同学应该看出来了，PrimaryKey 就是主键。使用 @PrimaryKey 来标注，字段类型必须是字符串（String）或整数（byte，short，int或long）以及它们的包装类型（Byte,Short, Integer, 或 Long）。不可以存在多个主键，使用字符串字段作为主键意味着字段被索引（注释 @PrimaryKey 隐式地设置注释 @Index）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PrimaryKey</span></div><div class="line"><span class="keyword">private</span> String id;</div></pre></td></tr></table></figure>
<h5 id="Required——表示该字段非空"><a href="#Required——表示该字段非空" class="headerlink" title="@Required——表示该字段非空"></a><em>@Required</em>——表示该字段非空</h5><p>在某些情况下，有一些属性是不能为null的。使用@Required可用于用于强行要求其属性不能为空，只能用于Boolean, Byte, Short, Integer, Long, Float, Double, String, byte[] 和 Date。在其它类型属性上使用 @Required修饰会导致编译失败。</p>
<p><strong>非基本数据类型不需要使用注解 @Required，因为他们本身就不可为空</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Required</span></div><div class="line"><span class="keyword">private</span> String name;</div></pre></td></tr></table></figure>
<h5 id="Ignore——表示忽略该字段"><a href="#Ignore——表示忽略该字段" class="headerlink" title="@Ignore——表示忽略该字段"></a><em>@Ignore</em>——表示忽略该字段</h5><p>被添加 @Ignore 标签后，存储数据时会忽略该字段。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Ignore</span></div><div class="line"><span class="keyword">private</span> String name;</div></pre></td></tr></table></figure>
<h5 id="Index——添加搜索索引"><a href="#Index——添加搜索索引" class="headerlink" title="@Index——添加搜索索引"></a>@Index——添加搜索索引</h5><p>为字段添加搜索索引，这样会使得插入的速度变慢，数据量也变得更大。不过在查询速度将变得更快，建议只在优化读取性能的特定情况时添加索引。支持索引：String，byte，short，int，long，boolean和Date字段。</p>
<p>==<strong>注意</strong>：如果你创建Model并运行过，然后修改了Model。那么就需要升级数据库，否则会抛异常。升级方式后面会提到。==</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>使用默认配置</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Realm.init(<span class="keyword">this</span>);</div><div class="line">Realm mRealm = Realm.getDefaultInstance();</div></pre></td></tr></table></figure>
<p>这时候会创建一个叫做 default.realm 的Realm文件，一般来说，这个文件位于/data/data/包名/files/。通过 realm.getPath() 来获得该Realm的绝对路径</p>
<blockquote>
<p>注意：模拟器上运行时，Realm.getDefaultInstance()抛出异常，真机上没问题（不止何故）</p>
</blockquote>
<p>当然，我们还可以使用==RealmConfiguration==来配置Realm</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">RealmConfiguration config = <span class="keyword">new</span> RealmConfiguration.Builder() </div><div class="line">            .name(<span class="string">"myrealm.realm"</span>) <span class="comment">//文件名</span></div><div class="line">            .schemaVersion(<span class="number">0</span>) <span class="comment">//版本号</span></div><div class="line">            .build();</div><div class="line">Realm realm = Realm.getInstance(config);</div></pre></td></tr></table></figure>
<p>创建非持久化的Realm，也就是保持在内存中，应用关闭后就清除了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RealmConfiguration myConfig = <span class="keyword">new</span> RealmConfiguration.Builder(context) </div><div class="line">            .name(<span class="string">"myrealm.realm"</span>)<span class="comment">//保存在内存中</span></div><div class="line">            .inMemory() .build();</div></pre></td></tr></table></figure>
<p>RealmConfiguration支持的方法：</p>
<ul>
<li>Builder.name : 指定数据库的名称。如不指定默认名为default。</li>
<li>Builder.schemaVersion : 指定数据库的版本号。</li>
<li>Builder.encryptionKey : 指定数据库的密钥。</li>
<li>Builder.migration : 指定迁移操作的迁移类。</li>
<li>Builder.deleteRealmIfMigrationNeeded : 声明版本冲突时自动删除原数据库。</li>
<li>Builder.inMemory : 声明数据库只在内存中持久化。</li>
<li>build : 完成配置构建。</li>
</ul>
<h3 id="关闭Realm"><a href="#关闭Realm" class="headerlink" title="关闭Realm"></a>关闭Realm</h3><p>记得使用完后，在<em>onDestroy</em>中关闭Realm</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">    <span class="comment">// Close the Realm instance. </span></div><div class="line">    realm.close(); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><p>写入操作需要在事务中进行，可以使用<em>executeTransaction</em>方法来开启事务。</p>
<ul>
<li>使用executeTransaction方法插入数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mRealm.executeTransaction(<span class="keyword">new</span> Realm.Transaction() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm realm)</span> </span>&#123;</div><div class="line">        User user = realm.createObject(User.class);</div><div class="line">        user.setName(<span class="string">"Gavin"</span>);</div><div class="line">        user.setAge(<span class="number">23</span>);</div><div class="line">    &#125;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<p>在execute方法中执行插入操作</p>
<blockquote>
<p>注意：如果在UI线程中插入过多的数据，可能会导致主线程拥塞。</p>
</blockquote>
<ul>
<li>使用<em>copyToRealmOrUpdate</em>或<em>copyToRealm</em>方法插入数据</li>
</ul>
<p>当Model中存在主键的时候，推荐使用<em>copyToRealmOrUpdate</em>方法插入数据。如果对象存在，就更新该对象；反之，它会创建一个新的对象。若该Model没有主键，使用<em>copyToRealm</em>方法，否则将抛出异常。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> User user = <span class="keyword">new</span> User();</div><div class="line">user.setName(<span class="string">"Jack"</span>);</div><div class="line">user.setId(<span class="string">"2"</span>);</div><div class="line">mRealm.executeTransaction(<span class="keyword">new</span> Realm.Transaction() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm realm)</span> </span>&#123;</div><div class="line">        realm.copyToRealmOrUpdate(user);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>如果你用的是这样的<em>model</em></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User2</span> <span class="keyword">extends</span> <span class="title">RealmObject</span> </span>&#123;</div><div class="line">   <span class="keyword">public</span> String name;</div><div class="line">   <span class="keyword">public</span> <span class="keyword">int</span> age;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>就这样写</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mRealm.executeTransaction(<span class="keyword">new</span> Realm.Transaction() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm realm)</span> </span>&#123;</div><div class="line">        User2 user = realm.createObject(User2.class);</div><div class="line">        user.name = <span class="string">"Micheal"</span>;</div><div class="line">        user.age = <span class="number">30</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>如果User还有其他属性是，比如养了只Dog：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">RealmObject</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> String name;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">   <span class="keyword">private</span> Dog dog;</div><div class="line">   <span class="comment">//getters and setters</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要在User中加入该属性</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> RealmList&lt;Dog&gt; dogs;</div></pre></td></tr></table></figure>
<p>插入数据</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm realm)</span> </span>&#123;</div><div class="line">     User user = realm.createObject(User.class);</div><div class="line">     user.setName(<span class="string">"Gain"</span>);</div><div class="line">     user.setAge(<span class="number">23</span>);</div><div class="line"></div><div class="line">     Dog dog1 = realm.createObject(Dog.class);</div><div class="line">     dog1.setAge(<span class="number">1</span>);</div><div class="line">     dog1.setName(<span class="string">"二哈"</span>);</div><div class="line">     user.getDogs().add(dog1);</div><div class="line"></div><div class="line">     Dog dog2 = realm.createObject(Dog.class);</div><div class="line">     dog2.setAge(<span class="number">2</span>);</div><div class="line">     dog2.setName(<span class="string">"阿拉撕家"</span>);</div><div class="line">     user.getDogs().add(dog2);</div><div class="line">   &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>上面都是用可<em>executeTransaction</em>方法插入数据，还有另一种方法可以用于插入数据——<em>beginTransaction</em>和<em>commitTransaction</em></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mRealm.beginTransaction();<span class="comment">//开启事务</span></div><div class="line">User user = mRealm.createObject(User.class);</div><div class="line">user.setName(<span class="string">"Gavin"</span>);</div><div class="line">user.setId(<span class="string">"3"</span>);</div><div class="line">mRealm.commitTransaction();<span class="comment">//提交事务</span></div></pre></td></tr></table></figure>
<p>在插入前，先调用<em>beginTransaction()</em>，完成后调用<em>commitTransaction()</em>即可。</p>
<blockquote>
<p>注意：在UI和后台线程同时开启创建write的事务，可能会导致ANR错误。为了避免该问题，可以使用executeTransactionAsync来实现。</p>
</blockquote>
<ul>
<li>使用executeTransactionAsync<br>该方法会开启一个子线程来执行事务，并且在执行完成后进行结果通知。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">RealmAsyncTask transaction = mRealm.executeTransactionAsync(<span class="keyword">new</span> Realm.Transaction() &#123;</div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm realm)</span> </span>&#123;</div><div class="line">     User user = realm.createObject(User.class);</div><div class="line">     user.setName(<span class="string">"Eric"</span>);</div><div class="line">     user.setId(<span class="string">"4"</span>);</div><div class="line">   &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>还可以加入监听</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">RealmAsyncTask transaction =  mRealm.executeTransactionAsync(<span class="keyword">new</span> Realm.Transaction() &#123;</div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm realm)</span> </span>&#123;</div><div class="line">     User user = realm.createObject(User.class);</div><div class="line">     user.setName(<span class="string">"Eric"</span>);</div><div class="line">     user.setId(<span class="string">"4"</span>);</div><div class="line">   &#125;</div><div class="line">&#125;, <span class="keyword">new</span> Realm.Transaction.OnSuccess() &#123;</div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="comment">//成功回调</span></div><div class="line">   &#125;</div><div class="line">&#125;, <span class="keyword">new</span> Realm.Transaction.OnError() &#123;</div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable error)</span> </span>&#123;</div><div class="line">     <span class="comment">//失败回调</span></div><div class="line">   &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>注意：如果当<em>Acitivity</em>或<em>Fragment</em>被销毁时，在<em>OnSuccess</em>或<em>OnError</em>中执行UI操作，将导致程序奔溃 。用<em>RealmAsyncTask .cancel()</em>;可以取消事务</strong></p>
<p>在<em>onStop</em>中调用，避免crash</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span> <span class="params">()</span> </span>&#123;</div><div class="line"> <span class="keyword">if</span> (transaction != <span class="keyword">null</span> &amp;&amp; !transaction.isCancelled()) &#123;</div><div class="line">     transaction.cancel();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>JSON</li>
</ul>
<p>Realm还是个很nice的功能就是将Json字符串转化为对象，厉害了我的Realm<br>（直接借用官方的例子）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 一个city model</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">City</span> <span class="keyword">extends</span> <span class="title">RealmObject</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> String city;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">  <span class="comment">// getters and setters left out ...</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 使用Json字符串插入数据</span></div><div class="line">realm.executeTransaction(<span class="keyword">new</span> Realm.Transaction() &#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm realm)</span> </span>&#123;</div><div class="line">      realm.createObjectFromJson(City.class, <span class="string">"&#123; city: \"Copenhagen\", id: 1 &#125;"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 使用InputStream插入数据</span></div><div class="line">realm.executeTransaction(<span class="keyword">new</span> Realm.Transaction() &#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm realm)</span> </span>&#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          InputStream is = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"path_to_file"</span>));</div><div class="line">          realm.createAllFromJson(City.class, is);</div><div class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Realm 解析 JSON 时遵循如下规则：</p>
<ul>
<li>使用包含空值（null）的 JSON 创建对象;</li>
<li>对于非必须（可为空值的属性），设置其值为 null;</li>
<li>对于必须（不可为空值的属性），抛出异常;</li>
<li>使用包含空值（null）的 JSON 更新对;</li>
<li>对于非必须（可为空值的属性），设置其值为 nul;</li>
<li>对于必须（不可为空值的属性），抛出异常;</li>
<li>使用不包含对应属性的 JSON： * 该属性保持不变</li>
</ul>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>查找操作就比插入方便多了，并不需在事务中操作，直接查询即可。</p>
<ul>
<li>findAll ——查询<br>例：查询所有的User</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RealmResults&lt;User&gt; userList = mRealm.where(User.class).findAll();</div></pre></td></tr></table></figure>
<p>这里使用RealmResults来接受查询到的结果，突然出现的RealmResults可能会让人懵逼。看看他的源码，发现RealmResults继承了AbstractList，而AbstractList又实现了List接口。好吧，原来实现了我们熟悉的List接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RealmResults</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">RealmModel</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：RealmResults虽然实现了List接口，不过有很多方法是不能用的。比如add、addAll、remove、clear等，调用后会直接抛异常。不过也不用当心误用这些方法，因为它们都被标记为@Deprecated了。</p>
</blockquote>
<p>findAllAsync——异步查询<br>当数据量较大，可能会引起ANR的时候，就可以使用findAllAsync<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RealmResults&lt;User&gt; userList = mRealm.where(User.class)</div><div class="line">        .equalTo(<span class="string">"name"</span>, <span class="string">"Gavin"</span>)</div><div class="line">        .findAllAsync();</div></pre></td></tr></table></figure></p>
<p>值得注意的是，这里并不会马上查到数据，是有一定延时的。也就是说，你马上使用userList的时候，里面是没有数据的。可以注册RealmChangeListener监听器，或者使用isLoaded()方法，判断是否查询完成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (result.isLoaded()) &#123;</div><div class="line">   // 完成查询</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>findFirst ——查询第一条数据<br>例：查询User表中的第一条数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">User user2 = mRealm.where(User.class).findFirst();</div></pre></td></tr></table></figure>
<p>equalTo ——根据条件查询<br>例：得到name为Gavin的用户列表。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RealmResults&lt;User&gt; userList = mRealm.where(User.class)</div><div class="line">         .equalTo(<span class="string">"name"</span>, <span class="string">"Gavin"</span>).findAll();</div></pre></td></tr></table></figure>
<p>如果User中还有Dog属性，希望根据Dog的条件来获取用户：<br>例：查询dogs.name为二哈的User</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RealmResults&lt;User&gt; userList = mRealm.where(User.class)</div><div class="line">          .equalTo(<span class="string">"dogs.name"</span>, <span class="string">"二哈"</span>).findAll();</div></pre></td></tr></table></figure>
<p>得到有养有dogs.name为”二哈”的用户列表（这里的dogs是User表中的属性名）<br>equalTo ——多条件查询<br>当然，我们还经常要用到多条件的查询的功能。<br>例：找到用户名为“Gavin”，且dogs.name为“二哈”的User</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RealmResults&lt;User&gt; userList = mRealm.where(User.class)</div><div class="line">         .equalTo(<span class="string">"name"</span>, <span class="string">"Gavin"</span>).findAll();</div><div class="line">RealmResults&lt;User&gt; userList = user5.where()</div><div class="line">         .equalTo(<span class="string">"dogs.name"</span>, <span class="string">"二哈"</span>).findAll();</div></pre></td></tr></table></figure>
<p>上面先找到name为“Gavin”的User列表，然后再得到的结果中查询dogs.name为“二哈”<br>觉得这样写太麻烦？我也是这样想的，所以还可以这样写</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RealmResults&lt;User&gt; userList = mRealm.where(User.class)</div><div class="line">         .equalTo(<span class="string">"name"</span>, <span class="string">"Gavin"</span>)</div><div class="line">         .equalTo(<span class="string">"dogs.name"</span>, <span class="string">"二哈"</span>)</div><div class="line">         .findAll();</div></pre></td></tr></table></figure>
<p>是不是很清爽~~~<br>更多查询条件<br>上面就展示了equalTo的用法。当然，查询还有更多的用法，我就不一一示例了。已知的方法如下：<br>sum()：对指定字段求和。<br>average()：对指定字段求平均值。<br>min(): 对指定字段求最小值。<br>max() : 对指定字段求最大值。count : 求结果集的记录数量。<br>findAll(): 返回结果集所有字段，返回值为RealmResults队列<br>findAllSorted() : 排序返回结果集所有字段，返回值为RealmResults队列<br>between(), greaterThan(),lessThan(), greaterThanOrEqualTo() &amp; lessThanOrEqualTo()<br>equalTo() &amp; notEqualTo()<br>contains(), beginsWith() &amp; endsWith()<br>isNull() &amp; isNotNull()<br>isEmpty()&amp; isNotEmpty()<br>RealmQuery以及or的使用<br>在使用where()方法时，能得到一个RealmQuery对象，使用方法如下：<br>例：查询name为“Gavin”和“Eric”的用户</p>
<p>RealmQuery<user> query = mRealm.where(User.class);<br>query.equalTo(“name”, “Gavin”);<br>query.or().equalTo(“name”, “Eric”);<br>RealmResults<user> userList = query.findAll();<br>这种情况下就要用到or()方法<br>这么一大串，你又觉得麻烦了？没事，继续简化。</user></user></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RealmResults&lt;User&gt; userList = mRealm.where(User.class)</div><div class="line">          .equalTo(<span class="string">"name"</span>, <span class="string">"Gavin"</span>)</div><div class="line">          .or().equalTo(<span class="string">"name"</span>, <span class="string">"Eric"</span>)</div><div class="line">          .findAll();</div></pre></td></tr></table></figure>
<p>Tip：查询的时候你不用当心得到的RealmResults为null。如果查询的结果为空，那么RealmResults的size为0</p>
<p>排序<br>查询结束后，还可以进行排序，就像这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RealmResults&lt;User&gt; userList = mRealm.where(User.class) .findAll();</div><div class="line">result = result.sort(<span class="string">"age"</span>); <span class="comment">//根据age，正序排列</span></div><div class="line">result = result.sort(<span class="string">"age"</span>, Sort.DESCENDING);<span class="comment">//逆序排列</span></div></pre></td></tr></table></figure>
<p>聚合<br>RealmResult自带一些聚合方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">RealmResults&lt;User&gt; results = realm.where(User.class).findAll();</div><div class="line"><span class="keyword">long</span> sum = results.sum(<span class="string">"age"</span>).longValue();</div><div class="line"><span class="keyword">long</span> min = results.min(<span class="string">"age"</span>).longValue();</div><div class="line"><span class="keyword">long</span> max = results.max(<span class="string">"age"</span>).longValue();</div><div class="line"><span class="keyword">double</span> average = results.average(<span class="string">"age"</span>);</div><div class="line"><span class="keyword">long</span> matches = results.size();</div></pre></td></tr></table></figure>
<h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mRealm.executeTransaction(<span class="keyword">new</span> Realm.Transaction() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm realm)</span> </span>&#123;</div><div class="line">        <span class="comment">//先查找后得到User对象</span></div><div class="line">        User user = mRealm.where(User.class).findFirst();</div><div class="line">        user.setAge(<span class="number">26</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>修改也是需要在事务中操作。<br>使用查询语句得到数据，然后将内容改了即可。</p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>使用deleteFromRealm()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//先查找到数据</span></div><div class="line"><span class="keyword">final</span> RealmResults&lt;User&gt; userList = mRealm.where(User.class).findAll();</div><div class="line">mRealm.executeTransaction(<span class="keyword">new</span> Realm.Transaction() &#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm realm)</span> </span>&#123;</div><div class="line">      userList.get(<span class="number">0</span>).deleteFromRealm();</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>使用deleteFromRealm(int index)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mRealm.executeTransaction(<span class="keyword">new</span> Realm.Transaction() &#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm realm)</span> </span>&#123;</div><div class="line">      userList.deleteFromRealm(<span class="number">0</span>);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>更多方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">userList.deleteFirstFromRealm(); <span class="comment">//删除user表的第一条数据</span></div><div class="line">userList.deleteLastFromRealm();<span class="comment">//删除user表的最后一条数据</span></div><div class="line">results.deleteAllFromRealm();<span class="comment">//删除user表的全部数据</span></div></pre></td></tr></table></figure>
<h3 id="版本升级"><a href="#版本升级" class="headerlink" title="版本升级"></a>版本升级</h3><p>当数据结构发生变化是，需要升级数据库。对于Realm来说，数据库升级就是迁移操作，把原来的数据库迁移到新结构的数据库。（体验：略麻烦）</p>
<h4 id="例1：User类发生变化，移除age，新增个-Required的id字段。"><a href="#例1：User类发生变化，移除age，新增个-Required的id字段。" class="headerlink" title="例1：User类发生变化，移除age，新增个@Required的id字段。"></a>例1：User类发生变化，移除age，新增个@Required的id字段。</h4><p>User版本：version 0</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String name;</div><div class="line">int    age;</div></pre></td></tr></table></figure>
<p>User版本：version 1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@Required</div><div class="line">String    id;</div><div class="line">String name;</div></pre></td></tr></table></figure>
<p>创建迁移类CustomMigration，需要实现RealmMigration接口。执行版本升级时的处理：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">  * 升级数据库</div><div class="line">  */</div><div class="line"> class CustomMigration implements RealmMigration &#123;</div><div class="line">     @Override</div><div class="line">     public void migrate(DynamicRealm realm, long oldVersion, long newVersion) &#123;</div><div class="line">         RealmSchema schema = realm.getSchema();</div><div class="line">         if (oldVersion == 0 &amp;&amp; newVersion == 1) &#123;</div><div class="line">             RealmObjectSchema personSchema = schema.get(&quot;User&quot;);</div><div class="line">             //新增@Required的id</div><div class="line">             personSchema</div><div class="line">                     .addField(&quot;id&quot;, String.class, FieldAttribute.REQUIRED)</div><div class="line">                     .transform(new RealmObjectSchema.Function() &#123;</div><div class="line">                         @Override</div><div class="line">                         public void apply(DynamicReal</div><div class="line">mObject obj) &#123;</div><div class="line">                             obj.set(&quot;id&quot;, &quot;1&quot;);//为id设置值</div><div class="line">                         &#125;</div><div class="line">                     &#125;)</div><div class="line">                     .removeField(&quot;age&quot;);//移除age属性</div><div class="line">             oldVersion++;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>使用Builder.migration升级数据库，将版本号改为1（原版本号：0）。当Realm发现新旧版本号不一致时，会自动使用该迁移类完成迁移操作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">RealmConfiguration config = new RealmConfiguration.Builder() </div><div class="line">         .name(&quot;myrealm.realm&quot;) //文件名</div><div class="line">         .schemaVersion(1) </div><div class="line">         .migration(new CustomMigration())//升级数据库</div><div class="line">         .build();</div></pre></td></tr></table></figure>
<h2 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h2><p>对于这么火的RxJava，Realm又怎么会放过他。<br>Realm 包含了对 RxJava 的原生支持。如下类可以被暴露为一个 Observable：Realm, RealmResults, RealmObject, DynamicRealm 和 DynamicRealmObject。<br>（直接用一个官方的例子）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Realm realm = Realm.getDefaultInstance();</div><div class="line">GitHubService api = retrofit.create(GitHubService.class);</div><div class="line">realm.where(Person.class).isNotNull(&quot;username&quot;).findAllAsync().asObservable()</div><div class="line">    .filter(persons.isLoaded)</div><div class="line">    .flatMap(persons -&gt; Observable.from(persons))</div><div class="line">    .flatMap(person -&gt; api.user(person.getGithubUserName())</div><div class="line">    .observeOn(AndroidSchedulers.mainThread())</div><div class="line">    .subscribe(user -&gt; showUser(user));</div></pre></td></tr></table></figure>
<p>这里使用<em>asObservable</em>轻松转换成RxJava中的<em>Observable</em>，使用.<em>filter(persons.isLoaded)</em>来判断是否已查询完成。到这里，熟悉RxJava的同学应该已经看明白了~~。可能还有人会一脸懵逼，-&gt;? 这是什么鬼？哈哈，这叫Lambda，有时间可以去看看。</p>
<h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/Gavin-ZYX/RealmTest" target="_blank" rel="external">GitHub</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：郭霖&lt;/p&gt;
&lt;p&gt;原文作者：&lt;strong&gt;带心情去旅行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;http://www.jianshu.com/u/769d3d3a9d4b&quot;&gt;http://www.jianshu.com/u/769d3d3a9d4b&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://atwinner.github.io/categories/Android/"/>
    
    
      <category term="Realm" scheme="https://atwinner.github.io/tags/Realm/"/>
    
  </entry>
  
  <entry>
    <title>Android SDK开发随想录</title>
    <link href="https://atwinner.github.io/2017/01/16/android-sdk/"/>
    <id>https://atwinner.github.io/2017/01/16/android-sdk/</id>
    <published>2017-01-16T01:12:31.000Z</published>
    <updated>2017-01-16T02:34:52.067Z</updated>
    
    <content type="html"><![CDATA[<p>From：郭霖</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前更多开发者热衷于应用开发,极少数的开发者才有机会从事SDK开发工作,而市面上关于SDK开发介绍的文章少之又少,以至于让大家觉得SDK开发是相对比较难而且非常无聊的工作,今天我们就来简单的聊聊SDK开发的哪点事。</p>
<a id="more"></a>
<h2 id="关于SDK的解释"><a href="#关于SDK的解释" class="headerlink" title="关于SDK的解释"></a>关于SDK的解释</h2><h3 id="什么是SDK"><a href="#什么是SDK" class="headerlink" title="什么是SDK"></a>什么是SDK</h3><p>在开始正文之前,首先来聊聊 SDK 是个啥玩意.</p>
<p>SDK 是 Software Development Kit 的缩写,译为”软件开发工具包”,通常是为辅助开发某类软件而编写的特定软件包,框架集合等,SDK 一般包含相关文档,范例和工具.</p>
<p>SDK 可以分为 系统SDK 和 应用SDK.所谓的 系统SDK 是为特定的软件包,软件框架,硬件平台,操作系统等简历应用时所使用的开发工具集合.而 应用SDK 则是基于 系统SDK 开发的独立于具体业务而具有特定功能的集合.</p>
<p>比如在进行 Android 应用开发时,我们使用 Google 提供的 系统SDK(Android SDK),而我们经常使用的 友盟SDK,极光SDK 则是基于 系统SDK 开发的.</p>
<p>明确 SDK 的概念之后,再来聊一聊这三个概念:Library, API, Framework</p>
<h3 id="什么是Library"><a href="#什么是Library" class="headerlink" title="什么是Library"></a>什么是Library</h3><p>Library 即我们所说的库,通常是一组或者几组类的集合,通常是应用中某些功能的具体实现或者对系统已有功能的增强或补充.对 Android 开发者而言,最常见的莫过于是 Support Library,另外就是我们经常使用各种网络请求库(OkHttp, Volley),数据库操作,图片加载库(Glide, ImageLoader)等.</p>
<h3 id="什么是Framework"><a href="#什么是Framework" class="headerlink" title="什么是Framework"></a>什么是Framework</h3><p>Framework 即我们所说的框架,通常是系统或者应用的骨架,很多时候,它表现为一组抽象的构建及构件实例间交互的方法.因此,可以认为,Framework 规定了应用的体系结构,阐明了整体设计,写作构件之间的依赖关系以及控制流程.注意自处的 Framework 并不完全等同于你所熟知的 Android Framework 框架,可以认为 Android Framework 中体现了 Framework 的思想,并进行了实现.</p>
<h3 id="什么是API"><a href="#什么是API" class="headerlink" title="什么是API"></a>什么是API</h3><p>API 是 Application Programming Interface,又称为应用编程接口，是软件系统不同组成部分衔接的约定。更加通俗的说就 API 就是我们常见和编写的方法或函数.</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>明确了上面提到的概念之后,现在就可以来描述这四者之间的关联:<br>SDK 主要包含 Framework, API 及 Library 的三部分.Framework 定义了 SDK 整体的可重用设计,规定了 SDK 各功能模块的职责以及依赖关系.其中个功能模块体现为 Library.模块之间的内部通信及 SDK 外部通信(SDK对外提供服务的接口)则通过 API 进行.</p>
<p>另外完整的 SDK 还应该包含大量的示例和其他工具.比如在 Android SDK 的 tools 目录下提供了大量的辅助开发工具.</p>
<p>对我们而言,大部分情况下是为某种具体的业务需求开发对应的 SDK,以便作为第三正提供给其他需求方使用.比如百度推送的 SDK 主要实现消息推送功能,需求方只需要集成百度推送的 SDK 便可以使自己应用具备推送功能.</p>
<p>到现在已经介绍了 SDK 的主要构成,接下来我们重点来介绍 SDK的实现目标 以及 在SDK架构中的一些核心点.</p>
<h2 id="浅谈SDK实现目标"><a href="#浅谈SDK实现目标" class="headerlink" title="浅谈SDK实现目标"></a>浅谈SDK实现目标</h2><p>上面介绍了开发中常见的概念,现在来谈谈 SDK 的实现目标.任何应用都应具备:简洁易用,稳定,高效,轻量,SDK 作为一种特定应用当然也不例外.</p>
<h3 id="简洁易用"><a href="#简洁易用" class="headerlink" title="简洁易用"></a>简洁易用</h3><p>按照”奥卡姆剃须刀”理论,一个好的产品对第三方使用者使用而言应该是简洁易用,不用改让使用者花费太长时间学习的.这对SDK同样适用—SDK不应该对宿主应用有过多的代码侵入,也不应该有复杂频繁的接入工作.比如当开发者需要使用SDK的服务时,只需要在缘由的代码中新增一行即可.常见的SDK初始化如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ad</span> </span>&#123;</div><div class="line">    <span class="meta">@TargetApi</span>(<span class="number">9</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> synchroized <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(</span></span></div><div class="line">        Context context, SdkParams params) &#123;</div><div class="line">        <span class="comment">//省略</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当我们需要使用该 SD K的服务时,通过一行代码便可启用 <strong>Ad.init(this,params)</strong></p>
<p>要保证较少的代码侵入主要在对外提供服务时充分考虑到使用者的使用场景来设计出优良的API.一个 优良的API 在定义的时候应该满足绝大数开发者所预期的方式—语义上要求通俗易懂,使用上要求简单可靠.</p>
<p>一个优良的API首先是简单可靠的.在正常使用的情况下体现为稳定可靠的执行,在异常情况下体现为及时的告知使用者使用错误.初次之外,遵循一致的明明规则,并是所有的API呈现出一致的风格对开发而言无疑是个好消息.</p>
<h3 id="稳定"><a href="#稳定" class="headerlink" title="稳定"></a>稳定</h3><p>站在 SDK 使用者角度来看,我们期望第三方的 SDK 服务应该是稳定高效的,体现在提供稳定可靠的服务,在不影响宿主稳定性的前提下足够的高效,这就要求我们 SDK 设计者在设计并实现 SDK 时要尽可能的做到以下几点:</p>
<ul>
<li><p>对外提供稳定的API.SDK 的API一旦确定,如无非常严重情况不可更改.作为提供服务方,发生 API 变更所带来的变更成本非常大.</p>
</li>
<li><p>对外提供稳定的业务.在稳定的 API 后,必须要有稳定的业务来支撑.</p>
</li>
<li><p>SDK 运行时的稳定,作为服务提供方,我们必须确保 SDK 自身运行的稳定,并且保证接入方不会因为我们的 SDK 产生不稳定的情况.</p>
</li>
<li><p>版本稳定更新.和面向普通用户的应用相比,SDK 版本的迭代是非常缓慢的.并且需要尽可能的对开发者屏蔽迭代过程,以免给开发者带来不必要的适配开销.</p>
</li>
</ul>
<h3 id="高效"><a href="#高效" class="headerlink" title="高效"></a>高效</h3><p>无论是普通的应用开发还是SDK开发,都应该考虑到性能问题,SDK设计者应该着重考虑以下问题:</p>
<ul>
<li><p>更少的内存占用.在不使用多进程的情况下,SDK 服务和宿主程序运行在同一进程中,这种情况下必须要求限制 SDK 内存的占用,不能因为说因为我们 SDK 占用太多的内存资源,导致应用的存活时间变短.</p>
</li>
<li><p>更少的内存抖动.在占用更少内存的前提下,SDK 设计者必须刻意的减少反复GC造成的内存抖动问题.</p>
</li>
<li><p>更少的电量消耗.尽管很多时候无法对电量消耗做一个很好的权衡,但是仍然有一些可以参考的做法,比如减少使用耗电模块的时间.比如在使用定位服务时,不要求非常高的精度下优先使用网络定位而不是GPS定位.</p>
</li>
<li><p>更少的流量消耗.</p>
</li>
</ul>
<h2 id="SDK整体架构设计"><a href="#SDK整体架构设计" class="headerlink" title="SDK整体架构设计"></a>SDK整体架构设计</h2><p>SDK 的架构实现决定了 SDK 后续的维护难度,因此有必要在此对 SDK 整体架构中的一些点做些简单的说明.</p>
<h3 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h3><p>根据单一职责将系统拆分为不同的小模块，每个模块保持相对独立。</p>
<p>模块之间通过协议或接口通信，以减少相互之间的依赖耦合.模块内部按照设计的几大原则进行实现,以保证模块本身可以灵活实现</p>
<p>对于现代开发而言,模块化是常用的手段,从宏观角度来看,模块是系统最小的组成单元.</p>
<h3 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h3><p>组件开发同样是个老生常提的概念,但从我个人的感受来说,组件是对逻辑的封装,并具备单个可移植性.比如可以把日志记录做成一个组件,之后它可以被轻松在应用在不同的项目中.对于 Android 开发者而言,Android 提供的每个UI 控件同样也是组件,比如 Button,TextView等.</p>
<p>在明确了组件这一概念之后,组件化开发也就不难理解:所谓的组件化就是将整个项目划分成多个模块,几个模块或者单个模块作为一个组件,开发过程中我们可以对每个组件进行并行开发,最后发布时通过依赖将组件合并成完整的应用.</p>
<p>那为什么要使用组件化呢?随着 Android 的逐渐成熟,现在的app业务越来越复杂,与此同时,Android工程也变得日益庞大,代码行数十几万已经是常态,此时有几个问题便会凸显出来:</p>
<ul>
<li><p>工程任何一点改动都会造成整个工程的重新编译.记忆最深的就是早期在没有进行组件化的时候,庞大的工程动辄需要十几分钟的编译时间,一杯茶的时间就出来了,很多时候,不得不眼巴巴的等着,尽管现在可以使用 facebook 出品的 buck 以及来自阿里的 feeline 来加速编译过程,但是仍然不够.</p>
</li>
<li><p>整个工程中充斥的大量重复或者冗余的子模块,业务耦合度非常高,牵一发而动全身.这就造成了”老人不敢改,新人无法改”,因为谁也不能预知在做修改之后,会产生什么影响.</p>
</li>
<li><p>协作开发基本上是不可能的,天知道彼此在做什么.代码合并的的时候更是令人痛苦.</p>
</li>
<li><p>不方便测试.高度耦合的业务和模块导致无法下手进行测试,只能草草了事.</p>
</li>
</ul>
<p>通过引入组件化,上面遇到的问题便可迎刃而解.在 SDK 当中,根据实际情况对其进行组件化,比如我们将分享功能组件化,可以轻松的支持多种渠道的分享,在需要更新分享功能时,可以对其进行单独的编译和测试.</p>
<p>通过组件化,我们也可以轻松的实现 SDK 的定制功能,通过编写编译脚本,我们可以决定哪些组件被依赖,最终合并到完整的应用当中.比如友盟中的提供的可定制分享组件(如下图)的原理就是如此.</p>
<h3 id="插件化开发"><a href="#插件化开发" class="headerlink" title="插件化开发"></a>插件化开发</h3><p>什么是插件化开发这里就不做介绍了,一方面插件化并不是个新概念,另外就是插件化到目前为止理论层次上已经非常成熟,不想15念开始研究的时候资料相对较少.</p>
<p>在 SDK 中为什么使用插件化呢?SDK 不同于普通应用,不能频繁的进行更新,以免让开发者觉得 SDK 不稳定或者让开发者频繁的集成.SDK 看起来变化较慢,实则变化频繁.就以以前做的 广告SDK 而言,有时候经常需要对某类机型进行数据采集或者及时更新反作弊模块,在没有使用插件化之前,解决该问题是非常麻烦的.但是在我们利用插件化之后,解决该问题就变得非常容易.</p>
<p>我们将 SDK整体 划分为两部分:<strong>宿主</strong>和<strong>插件</strong>.宿主只向开发者提供必要的服务接口,并提供了自定义插件加载器.而核心的逻辑则是存在于插件中.当需要采集数据的时候,只需要由开发人员开发好数据采集插件并下发到指定设备即可;当需要修复SDK缺陷时,同样也只需要下发新的插件包即可.</p>
<p>通过在 SDK 使用插件化方案,可以有效的对开发者屏蔽手动更新的过程.宿主相对稳定,一旦确定,一般不会变动,而后续的业务变化则只需要通过更新插件来支撑.</p>
<p>除了上面谈到的利用插件化解决动态更新之外,通过将整个工程分为宿主和插件可以实现宿主的并行开发和分开编译,并且能有效的解决方法数65535的限制.</p>
<h3 id="SDK初始化"><a href="#SDK初始化" class="headerlink" title="SDK初始化"></a>SDK初始化</h3><p>和应用开发不同,很多情况下 SDK 没有自身的上下文 Context,而必须要借助应用提供.SDK 初始化的常见做法: <strong>Ad.init(Context context,AdParams params)</strong>,我们往往推荐开发者在应用 Application 组件中的 onCreate() 中去掉用该方法,这就意味着该初始化过程是同步的,假如 SDK 本身初始化时间较长,就会影响应用的启动速度.</p>
<p>在这种情况下,作为 SDK 的设计者必须着手解决该问题.通常将 SDK 服务进一步划分成核心服务和辅助服务,之后通过并行初始化和延迟初始化的手段来减少 SDK 初始化耗时.曾经在我所负责的广告 SDK 中,有开发者反馈我们的 SDK 启动较慢,通过对整个 SDK 启动流程进行分析后,我们将插件加载服务和云控服务并行初始化,而对于像日志服务则采用颜值初始化,通过该手段有效的减少了初始化耗时</p>
<h3 id="云更新控制"><a href="#云更新控制" class="headerlink" title="云更新控制"></a>云更新控制</h3><p>云控服务作为一种服务端控制客户端的手段在SDK中开发中非常重要,现在的SDK开发可以不支持插件化,但是必须要提供云控服务,以便让服务端能控制 SDK,比如在不需要进行数据采集的时候,可以通过云控服务关闭 SDK 采集功能,在需要的时候在将其打开.</p>
<p>对本身是基于插件化开发的 SDK 而言,云控服务更是不可或缺.</p>
<p>从实现的角度而言,云控服务分为服务端主动和客户端主动.服务端主动是指服务端会将最新的云控开关的信息推送到 SDK,而客户端主动则是 SDK 在进行操作之前会首先请求云控信息.对有推送开发经验的同学而言,这非常容易理解,就是像是为了实现消息推送功能,我们可以通过客户端轮训也可以通过服务端保持长连接进行消息推送一样.</p>
<h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><h4 id="SDK自身安全"><a href="#SDK自身安全" class="headerlink" title="SDK自身安全"></a>SDK自身安全</h4><p>为了区分接入者并增加 SDK 自身安全性,我们通常会为开发者分配 api key 和 api secret,SDK 会读取开发者配置的 api key 和 api secret,并用于随后的网络通信中.这是非常常见的做法,比如当你集成极光推送 SDK 的时候,它也许需要你提供 api key 和 api secret,如果没有则需要到官网进行申请.</p>
<h4 id="核心逻辑采用C-C"><a href="#核心逻辑采用C-C" class="headerlink" title="核心逻辑采用C/C++"></a>核心逻辑采用C/C++</h4><p>为了安全起见,数据加密类,模块算法类都都应该采用NDK开发,将其封装在so文件当中.有很多开发者不明白为什么这样会增强安全性.这里我们简单的做个说明.由于.so文件是通过C/Cpp编译出的文件,相对于Java的反编译文件来说,可读性更差,另外大部分的Android开发者并不具备###较深的C/Cpp能力,因此一定程度上增加了被破解的能力.</p>
<h4 id="通讯加密"><a href="#通讯加密" class="headerlink" title="通讯加密"></a>通讯加密</h4><p>针对实际情况对通讯协议进行加密,具体是采用对称加密还是非对称加密,则需要根据实际情况做选择.另外,请尽可能使用https来代替http.</p>
<h4 id="设备安全"><a href="#设备安全" class="headerlink" title="设备安全"></a>设备安全</h4><p>在很多情况下,比如广告 SDK 中,有一些开发者会通过虚拟机来刷广告,因此有必要针对此情况做判断.一旦 SDK 检测出非法请求后可以采取两种方案,一种是 SDK 拒绝服务,另外一种则是正常服务,SDK 会将作弊信息上传至服务器,以便后端服务定向排除数据.</p>
<h3 id="减少传输数据大小"><a href="#减少传输数据大小" class="headerlink" title="减少传输数据大小"></a>减少传输数据大小</h3><p>在设计 SDK 和服务端通讯之间的数据协议时,需要根据实际情况考虑,但有以下几条建议值得我们接受:</p>
<ul>
<li><p>如果对传输的数据大小有要求,建议对数据进行压缩.</p>
</li>
<li><p>可以采用 json/xml/Protobuf 等协议,如果它们仍然不能满足则可以考虑自定义二进制协议.</p>
</li>
</ul>
<h3 id="选择支持最低系统版本"><a href="#选择支持最低系统版本" class="headerlink" title="选择支持最低系统版本"></a>选择支持最低系统版本</h3><p>作为 SDK 的设计者,面临一个很大的问题是我们不得不考虑开发者应用所支持的系统最小版本,但是在 SDK 发布之前,我们并不知道会什么样的开发者使用我们提供的服务,因此为了让 SDK 支持更广泛的设备,我们需要降低最低支持的系统版本.比如现在市面上主流的系统版本是Android 5.0,那么对 SDK 而言,起码要支持到Android 4.0,甚至是Android 2.3.</p>
<p>降低最低支持版本看起来很容易,但是我们不得不做更多的工作来确保SDK能表现出一致的工作行为(通常,我们在SDK内部检测当前系统版本来确定哪些方法可以被调用).更残酷的真相是我们花费了很大的精力去支持2.3,但来自2.3系统版本的请求量却连1%都不到.</p>
<h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><p>Android中任何开发都避不开权限申请.作为 SDK 的设计者,对于权限遵循”如无必要,无需增加”,换句话说就是用不到的权限,就不要加上去,这也是我们所谓的最小权限原则,该原则同样适用于普通应用开发.</p>
<p>在刚接触 SDK 开发时,某些早期功能需要某些权限,但是后期该功能被砍掉了,但是权限却忘记去掉,这就导致不必要权限仍然存在的情况.</p>
<p>另外过多的权限申请,会让开发者怀疑你的目的.比如一个广告SDK的你申请照相机权限是想干嘛?恩,我怀疑你在偷拍我….好吧,这里我只是开个玩笑.</p>
<p>另外,从Android 6.0以上,google改变了权限申请的策略,因此需要单独对此做适配.</p>
<h3 id="日志服务"><a href="#日志服务" class="headerlink" title="日志服务"></a>日志服务</h3><p>无论系统大小,日志服务是基本的服务.一个良好的日志服务能够帮助我们快速的发现问题,定位缺陷,从而获得问题的解决方案.</p>
<p>SDK 的日志服务和其他常见的日志服务并无太大的不同,但是要保证以下几点:</p>
<ol>
<li><p>日志服务能够记录有效的信息,在SDK要关键位置进行打点.</p>
</li>
<li><p>日志服务上传日志信息到服务器时,要保证最大的可靠性,不能发生上传失败后抛弃日志的情况.</p>
</li>
<li><p>日志服务不能影响对正常的操作流程有过多的性能影响.SDK 产生的日志信息往往是非常多的,因此必须考虑日志IO操作所带来的开销.</p>
</li>
</ol>
<h2 id="深究API设计"><a href="#深究API设计" class="headerlink" title="深究API设计"></a>深究API设计</h2><p>API 的设计在任何开发中都是非常重要的,很多时候软件的质量好不好在 API 的设计可以得到体现.在普通的应用开发中,API 只会在应用开发人员间流通而不会暴露给非本应用开发的其他人员,但是 SDK 作为一种服务,需要向开发者暴露一部分 API.通常我们将内部流通的 API 称之为 内部API,而开放给开发者的称之为 SDK API.</p>
<p>两者使用场景虽然不同,但是都遵循着一些通用的设计规则,这里无法细说,只列出我认为需要重点关注的十一条原则:</p>
<h3 id="方法名能够表明其用途"><a href="#方法名能够表明其用途" class="headerlink" title="方法名能够表明其用途"></a>方法名能够表明其用途</h3><p>方法名是理解方法含义的第一渠道.一个好的方法名首先是能够向他人展示自身功能,这样做的好处就是能够减少不必要的沟通成本,对于开发者而言,还有什么比直接读代码更直观呢.</p>
<h3 id="参数的合法性检验"><a href="#参数的合法性检验" class="headerlink" title="参数的合法性检验"></a>参数的合法性检验</h3><p>对参数进行合法性检验是非常重要的,请不要想当然的认为可以用运行时异常来代替.当合法性校验不通过时,针对方法权限不同分别对应不同不同的处理策略:</p>
<ul>
<li><p>对于公开方法通过显示检查抛出异常的方式，并且使用javadoc的@throw来说明抛出异常的原因</p>
</li>
<li><p>对于私有方法通过断言的方式来检查参数的合法</p>
</li>
<li><p>检查构造方法的参数的合法性，以使对象处在统一状态.需要注意,如果检查的代价太大，需要综合考量，比如如果接受的是一个很大的List，此时检查的代价可能很大</p>
</li>
</ul>
<h3 id="方法要明确其单一的功能"><a href="#方法要明确其单一的功能" class="headerlink" title="方法要明确其单一的功能"></a>方法要明确其单一的功能</h3><p>一个方法应该具有单一的功能，尽可能做更少，但是更专的事情.这也是我们常说的单一职责原则.另外一定要记住宁可提供小而美的方法也不要提供大而全的方法,经验正面大而全的方法往往发生变动,产生风险的可能性更高,因此不如提供更小的方法以便组合使用</p>
<h3 id="方法异常问题"><a href="#方法异常问题" class="headerlink" title="方法异常问题"></a>方法异常问题</h3><p>对于需要暴露给开发者的方法要及时的抛出可查异常来帮助开发者在编译阶段发现问题,另外,对于运行时异常,SDK 设计者必须保证该类异常不会导致宿主程序出问题并且需要告知开发者.</p>
<h3 id="方法权限控制"><a href="#方法权限控制" class="headerlink" title="方法权限控制"></a>方法权限控制</h3><p>方法的权限也是需要着重考虑的,SDK 设计者必须同时从安全和业务的角度考虑哪些方法是可公开的,哪些是不可公开以及哪些是静态的.</p>
<h3 id="避免过长参数"><a href="#避免过长参数" class="headerlink" title="避免过长参数"></a>避免过长参数</h3><p>过长的参数会造成记忆上困难,需要慎重对待.在无法避免过长参数的情况下,需要考虑其他的方法进行解决:</p>
<p>a. 通过使用Builder模式来实现</p>
<p>b. 通过使用辅助类,通常采用静态内部类的方式,具体见静态内部类的使用</p>
<p>c. 通过将多个参数封装成类对象</p>
<p>d. 通过将参数拆解成多个方法的参数</p>
<h3 id="谨慎使用方法重载"><a href="#谨慎使用方法重载" class="headerlink" title="谨慎使用方法重载"></a>谨慎使用方法重载</h3><p>重载不应该让使用者感到疑惑,即不应该出现这种情况:同样的参数,但是开发者不能明确哪个方法会被执行.换言之就是不要产生歧义性.</p>
<p>另外需要注意,不要存在参数类型经过自动转换就可以运行在另外一个方法的情况,我曾经在code review 中看到这样的代码:list中的 remove(Object) 和 remove(int),请务必保证自己不会犯类似的错误.</p>
<p>尽管在java当中能够使用重载,但是我不建议使用,尤其是不要重载变长参数,在需要重载的时候宁可使用不同方法名来代替也要好的多.关于这点java中提供的 ObjectOutputStream 类给我们做了很好的示范:它的write对于每个基本类型都有一个变形,比如写出字符,写出boolean等操作,我们发现设计者,并没有使用重载将其设计成 write(Long l),write(Boolean b),而是将其设计为 writeLong(l),writeBoolean().</p>
<p>对于构造函数,则可以通过是用静态工厂的方式来代替重载.</p>
<h3 id="谨慎使用变长参数"><a href="#谨慎使用变长参数" class="headerlink" title="谨慎使用变长参数"></a>谨慎使用变长参数</h3><p>多数情况下不需要使用变长参数,一般方法的参数在5个以上的时候,才 建议使用变长参数.在还有其他非变长参数的情况下,我觉得变长参数放在形参列表的最后.</p>
<h3 id="避免方法直接返回NUll"><a href="#避免方法直接返回NUll" class="headerlink" title="避免方法直接返回NUll"></a>避免方法直接返回NUll</h3><p>对于需要返回数组或这集合的方法,不要返回null.比如我们去买糕点店买面包,面包没了是一种正常状态,就不应该返回null,而是返回长度为0的数组或集合.</p>
<h3 id="必要时进行保护性拷贝"><a href="#必要时进行保护性拷贝" class="headerlink" title="必要时进行保护性拷贝"></a>必要时进行保护性拷贝</h3><p>当类接受来自客户端的对象或者需要向客户端返回对象,如果该类不能容忍进来的对象再发生变化,那么有必要对对象进行保护性拷贝.另外要注意参数的合法性检验发生在保护性拷贝之后. </p>
<p>需要注意的是如果需要进行保护性拷贝的对象非常大,比如list集合中存在十多万个对象,需要权衡处理.</p>
<p>这十一条原则是我在团队中推广并要求严格遵守的,下面,将对这十条原则分别进行说明.</p>
<h2 id="SDK开发流程"><a href="#SDK开发流程" class="headerlink" title="SDK开发流程"></a>SDK开发流程</h2><p>关于SDK开发流程,我会从以下三个方面写:一时团队中如何协同开发,二是SDK的持续集成,三是SDK多仓库拆分和管理.</p>
<p>这三方面会再另外的篇章中展现(具体什么时候写完目前还未确定)</p>
<h2 id="SDK版本管理策略"><a href="#SDK版本管理策略" class="headerlink" title="SDK版本管理策略"></a>SDK版本管理策略</h2><h3 id="SDK-版本号命名及修改原则"><a href="#SDK-版本号命名及修改原则" class="headerlink" title="SDK 版本号命名及修改原则"></a>SDK 版本号命名及修改原则</h3><p>SDK版本号命名和我们以往的命名规则并无太大不同,通由4部分组成,格式为:</p>
<p>V 主版本号 子版本号 阶段版本号_日期版本号加希腊字母版本号.比如：V1_1_2_161209_beta.</p>
<p><strong>希腊字母版本号说明</strong></p>
<ul>
<li><p>Alpha版:内部测试版,此版本表示该软件在该阶段主要是以实现功能为主,Bug相对较多,需要继续修改,通常只在内部流通流通而不对外开放.</p>
</li>
<li><p>Beta版:外部测试版,该版本相对Alpha已经有了很大的改进,不存在严重的Bug,但还是存在一些缺陷,需要进一步的测试以检查和消除Bug.</p>
</li>
<li><p>RC版:该版本已经相当成熟,不存在导致错误的Bug.与正式版相差无几.</p>
</li>
<li><p>Release版:该版本意味着”最终版本”,是最终交付用户或者公开发布的版本,也称为标准版.需要注意的是,该版本在发布的时候回以符合R来代替Release单词.</p>
</li>
</ul>
<p><strong>版本号修改规则</strong></p>
<ol>
<li><p>主版本号变化:当功能模块有较大的变化或者整体架构发生变化</p>
</li>
<li><p>子版本号变化:当功能有一定变化</p>
</li>
<li><p>阶段版本号变化:一般是Bug修复或者较小的变动,根据反馈,需要经常发布修订版本.</p>
</li>
<li><p>日期版本号(161209):用于记录修改项目的当前日期,每天对项目的修改都要更改日期版本号.</p>
</li>
<li><p>希腊字母版本号:此版本�号用于标注当前软件处于那个开发阶段,当软件进入到另一个阶段是需要修改.</p>
</li>
</ol>
<h3 id="API版本管理"><a href="#API版本管理" class="headerlink" title="API版本管理"></a>API版本管理</h3><p>和普通应用API版本管理不同,SDK 设计者需要着重关注SDK API的管理.原则上SDK API一旦公开发布后其状态(签名和具体实现)应为不可变.</p>
<p>对于特殊情况下API的变更,需要遵守”开闭原则”,即一个类,模块,方法应该对扩展开发,对修改关闭.这就要求我们做到以下几点:</p>
<ol>
<li><p>在需要调整SDK API时,优先选择添加新方法,而不是在原方法上修改.对于实现相同功能的新方法,尽可能的要兼容原始方法.</p>
</li>
<li><p>在需要废除某些方法时,需要在正式版发版前使用 <em>@deprecated</em> 标识,并给出替代方案和废弃的时间(通常是SDK版本号)</p>
</li>
</ol>
<h3 id="接入文档和API文档版本管理"><a href="#接入文档和API文档版本管理" class="headerlink" title="接入文档和API文档版本管理"></a>接入文档和API文档版本管理</h3><p>接入文档是用来告诉 SDK 使用者,如何使用 SDK,使用的详细步骤和可能发生的问题,每个公司会有自己的一套规则,这个不需要做太多的解释.</p>
<p>另外,接入文档通常分为两份:内部版和公开版.内部版通常用于内部开发人员和测试人员,信息较为详细,而公开版则是面向开发者,相比内部版会省略的一些信息.</p>
<p>API文档其实就是对 SDK API 的更详细说明,类似 java 中的 api doc,可以借助jdk的自带javadoc直接生成,当然在Android Studio也提供了便捷的生成方式.</p>
<p>无论是接入文档还是api说明文档,其变更一般发生在SDK版本发生变化时.当SDK发生变更时,文档必须随之更新,不能出现 SDK 更新后说明文档不与之匹配的情况.</p>
<h3 id="集成Demo版本管理"><a href="#集成Demo版本管理" class="headerlink" title="集成Demo版本管理"></a>集成Demo版本管理</h3><p>集成Demo通常是一个简单的app,用来展示如何快速的接入SDK.其版本变更策略和SDK版本的变化保持一致.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SDK开发中需要关注的点非常多,每个点都不能用三言两语完成的,后面会在此基础上慢慢的补充.</p>
<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>郭霖大神的微信公众号</p>
<p><img src="/img/guolin.png" alt="郭霖"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;From：郭霖&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;目前更多开发者热衷于应用开发,极少数的开发者才有机会从事SDK开发工作,而市面上关于SDK开发介绍的文章少之又少,以至于让大家觉得SDK开发是相对比较难而且非常无聊的工作,今天我们就来简单的聊聊SDK开发的哪点事。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://atwinner.github.io/categories/Android/"/>
    
    
      <category term="SDK" scheme="https://atwinner.github.io/tags/SDK/"/>
    
  </entry>
  
  <entry>
    <title>Android面试题梳理</title>
    <link href="https://atwinner.github.io/2017/01/15/interview/"/>
    <id>https://atwinner.github.io/2017/01/15/interview/</id>
    <published>2017-01-15T00:07:37.000Z</published>
    <updated>2017-01-15T12:19:40.341Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1. 请解释下在单线程模型中Message,Handler,Message Queue,Looper之间的关系</strong></p>
<a id="more"></a>
<p>答：简单的说，Handler获取当前线程中的looper对象，looper用来从存放Message的MessageQueue中取出Message，再有Handler进行Message的分发和处理.</p>
<p>Message Queue(消息队列)：用来存放通过Handler发布的消息，通常附属于某一个创建它的线程，可以通过Looper.myQueue()得到当前线程的消息队列</p>
<p>Handler：可以发布或者处理一个消息或者操作一个Runnable，通过Handler发布消息，消息将只会发送到与它关联的消息队列，然也只能处理该消息队列中的消息</p>
<p>Looper：是Handler和消息队列之间通讯桥梁，程序组件首先通过Handler把消息传递给Looper，Looper把消息放入队列。Looper也把消息队列里的消息广播给所有的</p>
<p>Handler：Handler接受到消息后调用handleMessage进行处理</p>
<p>Message：消息的类型，在Handler类中的handleMessage方法中得到单个的消息进行处理</p>
<p>在单线程模型下，为了线程通信问题，Android设计了一个Message Queue(消息队列)， 线程间可以通过该Message Queue并结合Handler和Looper组件进行信息交换。下面将对它们进行分别介绍：</p>
<ol>
<li><p>Message</p>
<p> Message消息，理解为线程间交流的信息，处理数据后台线程需要更新UI，则发送Message内含一些数据给UI线程。</p>
</li>
<li><p>Handler</p>
<p> Handler处理者，是Message的主要处理者，负责Message的发送，Message内容的执行处理。后台线程就是通过传进来的 Handler对象引用来sendMessage(Message)。而使用Handler，需要implement 该类的 handleMessage(Message)方法，它是处理这些Message的操作内容，例如Update UI。通常需要子类化Handler来实现handleMessage方法。</p>
</li>
<li><p>Message Queue</p>
<p> Message Queue消息队列，用来存放通过Handler发布的消息，按照先进先出执行。每个message queue都会有一个对应的Handler。Handler会向message queue通过两种方法发送消息：sendMessage或post。这两种消息都会插在message queue队尾并按先进先出执行。但通过这两种方法发送的消息执行的方式略有不同：通过sendMessage发送的是一个message对象,会被 Handler的handleMessage()函数处理；而通过post方法发送的是一个runnable对象，则会自己执行。</p>
</li>
<li><p>Looper</p>
<p> Looper是每条线程里的Message Queue的管家。Android没有Global的Message Queue，而Android会自动替主线程(UI线程)建立Message Queue，但在子线程里并没有建立Message Queue。所以调用Looper.getMainLooper()得到的主线程的Looper不为NULL，但调用Looper.myLooper() 得到当前线程的Looper就有可能为NULL。对于子线程使用Looper，API Doc提供了正确的使用方法：这个Message机制的大概流程：</p>
</li>
<li>在Looper.loop()方法运行开始后，循环地按照接收顺序取出Message Queue里面的非NULL的Message。</li>
<li>一开始Message Queue里面的Message都是NULL的。当Handler.sendMessage(Message)到Message Queue，该函数里面设置了那个Message对象的target属性是当前的Handler对象。随后Looper取出了那个Message，则调用 该Message的target指向的Hander的dispatchMessage函数对Message进行处理。在dispatchMessage方法里，如何处理Message则由用户指定，三个判断，优先级从高到低：<br> 1) Message里面的Callback，一个实现了Runnable接口的对象，其中run函数做处理工作；<br> 2) Handler里面的mCallback指向的一个实现了Callback接口的对象，由其handleMessage进行处理；<br> 3) 处理消息Handler对象对应的类继承并实现了其中handleMessage函数，通过这个实现的handleMessage函数处理消息。<br> 由此可见，我们实现的handleMessage方法是优先级最低的！</li>
<li>Handler处理完该Message (update UI) 后，Looper则设置该Message为NULL，以便回收！<br> 在网上有很多文章讲述主线程和其他子线程如何交互，传送信息，最终谁来执行处理信息之类的，个人理解是最简单的方法——判断Handler对象里面的Looper对象是属于哪条线程的，则由该线程来执行！<ol>
<li>当Handler对象的构造函数的参数为空，则为当前所在线程的Looper；</li>
<li>Looper.getMainLooper()得到的是主线程的Looper对象，Looper.myLooper()得到的是当前线程的Looper对象。</li>
</ol>
</li>
</ol>
<p><strong>2. 如果有个100M大的文件，需要上传至服务器中，而服务器form表单最大只能上传2M，可以用什么方法。</strong></p>
<p>这个问题不是很明确我觉得，首先来说使用http协议上传数据，特别在android下，跟form没什么关系。传统的在web中，在form中写文件上传，其实浏览器所做<br>的就是将我们的数据进行解析组拼成字符串，以流的方式发送到服务器，且上传文件用的都是POST方式，POST方式对大小没什么限制。<br>回到题目，可以说假设每次真的只能上传2M，那么可能我们只能把文件截断，然后分别上传了。</p>
<p><strong>3、内存溢出和内存泄漏有什么区别？何时会产生内存泄漏？内存优化有哪些方法？</strong></p>
<p>内存溢出通俗理解就是软件（应用）运行需要的内存，超出了它可用的最大内存。<br>内存泄漏就是我们对某一内存空间的使用，使用完成后没有释放。<br>内存优化：Android中容易内存溢出的部分，就是图片的加载，我们可以使用图片的压缩加上使用LruCache缓存的目的来控制图片所能够使用的内存。<br>还有对于比较耗资源的对象及时的关闭，例如Database Conn，各种传感器， Service 等等。</p>
<p><strong>4、AsyncTask使用在哪些场景？它的缺陷是什么？如何解决？</strong></p>
<p>AsyncTask 运用的场景就是我们需要进行一些耗时的操作，耗时操作完成后更新主线程，或者在操作过程中对主线程的UI进行更新。<br>缺陷：AsyncTask中维护着一个长度为128的线程池，同时可以执行5个工作线程，还有一个缓冲队列，当线程池中已有128个线程，缓冲队列已满时，如果<br>此时向线程提交任务，将会抛出RejectedExecutionException。<br>解决：由一个控制线程来处理AsyncTask的调用判断线程池是否满了，如果满了则线程睡眠否则请求AsyncTask继续处理。</p>
<p><strong>5、Activity用SharedPreferences保存数据，大小有木有限制？</strong></p>
<p><strong>6、Activity间通过Intent传递数据大小有没有限制？</strong></p>
<p>Intent在传递数据时是有大小限制的，这里官方并未详细说明，不过通过实验的方法可以测出数据应该被限制在1MB之内（1024KB），笔者采用的是传递Bitmap的方法，发现当图片大小超过1024（准确地说是1020左右）的时候，程序就会出现闪退、停止运行等异常(不同的手机反应不同)，因此可以判断Intent的传输容量在1MB之内。</p>
<p><strong>7、assest文件夹里放文件，对于文件的大小有没有限制？</strong></p>
<p>assets目录更像一个附录类型的目录，Android不会为这个目录中的文件生成ID并保存在R类当中，因此它与Android中的一些类和方法兼容度更低。<br>同时，由于你需要一个字符串路径来获取这个目录下的文件描述符，访问的速度会更慢。但是把一些文件放在这个目录下会使一些操作更加方便，<br>比方说拷贝一个数据库文件到系统内存中。要注意的是，你无法在Android XML文件中引用到assets目录下的文件，只能通过AssetManager来访问<br>这些文件。数据库文件和游戏数据等放在这个目录下是比较合适的。另外，网上关于assets和raw的资料都千篇一律了，因此关于这两者中单个文件<br>大小不能超过1M的<strong>错误</strong>描述也在传播，即如果读取超过1M的文件会报”Data exceeds UNCOMPRESS_DATA_MAX (1314625 vs 1048576)”的<br>IOException，还引申出种种解决方案。个人认为不应该有这样的限制，为了验证这个说法写了个Demo，发现将近5M的压缩包在assets和raw中<br>都能正常访问，因此在这里纠正一下，理论上只要打包不超过Android APK 50M大小的限制都是没有问题的。当然了，不排除是Android很早期的<br>时候因为设备硬件原因aapt在编译的时候对这两个文件夹大小做出了限制，如果是这样，较新版的ADT应该不会出现这种情况。</p>
<p><strong>8、 启动一个程序，可以主界面点击图标进入，也可以从一个程序中跳转过去，二者有什么区别？</strong></p>
<p>是因为启动程序（主界面也是一个app），发现了在这个程序中存在一个设置为</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>的activity,<br>所以这个launcher会把icon提出来，放在主界面上。当用户点击icon的时候，发出一个Intent：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent intent = mActivity.getPackageManager().getLaunchIntentForPackage(packageName);</div><div class="line">mActivity.startActivity(intent);</div></pre></td></tr></table></figure>
<p>跳过去可以跳到任意允许的页面，如一个程序可以下载，那么真正下载的页面可能不是首页（也有可能是首页），这时还是构造一个Intent，startActivity.<br>这个intent中的action可能有多种view,download都有可能。系统会根据第三方程序向系统注册的功能，为你的Intent选择可以打开的程序或者页面。所以唯一的一点<br>不同的是从icon的点击启动的intent的action是相对单一的，从程序中跳转或者启动可能样式更多一些。本质是相同的。</p>
<p><strong>9、程序之间的亲和性的理解。</strong></p>
<p>1、默认情况下一个应用的所有Activity都是具有相同的affinity，都是从application中继承，application的affinity默认就是manifest的包名。<br>2、affinity对Activity来说，就像是身份证一样，可以告诉所在的Task，自己属于其中的一员。<br>3、应用场合：<br>a:根据affinity重新为Activity选择合适的宿主Task;<br>b:与allowTaskReparenting属性配合;<br>c:启动Activity使用Intent设置了FLAG_ACTIVITY_NEW_TASK标记。</p>
<p><strong>10、同一个程序，但不同的Activity是否可以放在不同的Task任务栈中？</strong></p>
<p>可以放在不同的Task中。需要为不同的activity设置不同的affinity属性，启动activity的Intent需要包含FLAG_ACTIVITY_NEW_TASK标记。</p>
<p><strong>11、横竖屏切换时候Activity的生命周期。</strong></p>
<p>1、不设置Activity的android:configChanges时，切屏会重新调用各个生命周期，切横屏时会执行一次，切竖屏时会执行两次<br>2、设置Activity的android:configChanges=”orientation”时，切屏还是会重新调用各个生命周期，切横、竖屏时只会执行一次<br>3、设置Activity的android:configChanges=”orientation|keyboardHidden”时，切屏不会重新调用各个生命周期，只会执行onConfigurationChanged方法</p>
<p><strong>12、AIDL的全称是什么？如何工作？</strong></p>
<p>全称是：Android Interface Define Language<br>在Android中, 每个应用程序都可以有自己的进程. 在写UI应用的时候, 经常要用到Service. 在不同的进程中, 怎样传递对象呢? 显然, Java中不允许跨进程内存共享.<br> 因此传递对象, 只能把对象拆分成操作系统能理解的简单形式, 以达到跨界对象访问的目的. 在J2EE中,采用RMI的方式, 可以通过序列化传递对象. 在Android中, 则<br>采用AIDL的方式. 理论上AIDL可以传递Bundle,实际上做起来却比较麻烦。<br>AIDL(AndRoid接口描述语言)是一种借口描述语言; 编译器可以通过aidl文件生成一段代码，通过预先定义的接口达到两个进程内部通信进程的目的. 如果需要<br>在一个Activity中, 访问另一个Service中的某个对象, 需要先将对象转化成AIDL可识别的参数(可能是多个参数), 然后使用AIDL来传递这些参数, 在消息的接收端, 使用<br>这些参数组装成自己需要的对象.AIDL的IPC的机制和COM或CORBA类似, 是基于接口的，但它是轻量级的。它使用代理类在客户端和实现层间传递值. 如果要使用AIDL,<br>需要完成2件事情: 1. 引入AIDL的相关类.; 2. 调用aidl产生的class.<br>AIDL的创建方法:<br>AIDL语法很简单,可以用来声明一个带一个或多个方法的接口，也可以传递参数和返回值。 由于远程调用的需要, 这些参数和返回值并不是任何类型.<br>下面是些AIDL支持的数据类型:</p>
<ol>
<li>不需要import声明的简单Java编程语言类型(int,boolean等)</li>
<li>String, CharSequence不需要特殊声明</li>
<li>List, Map和Parcelables类型, 这些类型内所包含的数据成员也只能是简单数据类型, String等其他比支持的类型.</li>
</ol>
<p><strong>13、dvm的进程和Linux的进程, 应用程序的进程是否为同一个概念</strong></p>
<p>Dvm的进程是dalivk虚拟机进程,每个android程序都运行在自己的进程里面,每个android程序系统都会给他分配一个单独的liunx uid(user id),<br>每个dvm都是linux里面的一个进程.所以说这两个进程是一个进程.</p>
<p><strong>14、 Android的四大组件是哪些，它们的作用？</strong></p>
<p>Activity：Activity是Android程序与用户交互的窗口，是Android构造块中最基本的一种，它需要为保持各界面的状态，做很多持久化的事情，妥善管理生命周期以及一些跳转逻辑<br>Service：后台服务于Activity，封装有一个完整的功能逻辑实现，接受上层指令，完成相关的事物，定义好需要接受的Intent提供同步和异步的接口<br>Content Provider：是Android提供的第三方应用数据的访问方案，可以派生Content Provider类，对外提供数据，可以像数据库一样进行选择排序，屏蔽内部数据的存储细节，向外提供统一的借口模型，大大简化上层应用，对数据的整合提供了更方便的途径<br>BroadCast Receiver：接受一种或者多种Intent作触发事件，接受相关消息，做一些简单处理，转换成一条Notification，统一了Android的事件广播模型</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1. 请解释下在单线程模型中Message,Handler,Message Queue,Looper之间的关系&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://atwinner.github.io/categories/Android/"/>
    
    
      <category term="面试" scheme="https://atwinner.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Android 6.0的运行时权限</title>
    <link href="https://atwinner.github.io/2016/12/28/android-runtime-permission/"/>
    <id>https://atwinner.github.io/2016/12/28/android-runtime-permission/</id>
    <published>2016-12-28T09:42:25.000Z</published>
    <updated>2017-01-12T07:18:13.223Z</updated>
    
    <content type="html"><![CDATA[<p>随着Android6.0+系统的普及，越来越的项目会遇到权限上的问题，起初以为是个例、是机型的问题，后来遇到的次数多了，才逐步的意识到可能是系统做出了修改。本文将尝试对运行时权限做一定的总结。</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在6.0以前的系统，都是权限一刀切的处理方式，只要用户安装，Manifest申请的权限都会被赋予，并且安装后权限也撤销不了。<br>在本地安装apk文件时，会弹出如下的权限提示信息。</p>
<p><img src="/img/AndroidPermission/android_permission.jpg" alt="Android5.1运行效果"></p>
<p>这个时候用户只有两种选择，取消或者安装，安装就代表用户相信此应用，并且愿意赋予相应的权限。取消的话，就没有下文了……</p>
<p>因此，为了避免这种情况的发生，从6.0之后采用了运行时权限的机制，这就要求应用在运行时主动向系统请求权限。</p>
<h2 id="一种简单的土办法"><a href="#一种简单的土办法" class="headerlink" title="一种简单的土办法"></a>一种简单的土办法</h2><p>如果将<strong>targetSdkVersion</strong>设置为低于<strong>23</strong>，就相当于告诉系统，这个应用还没有准备好去应对运行时权限的神奇机制，即依然按照之前的逻辑运行。<br>但是系统的权限依旧是可以关闭的，此时如果在系统设置中关闭了相应的权限，依旧会导致程序因外缺少权限而崩溃。<strong>所以该面对的迟早要面对，拖着总不是办法的</strong>。</p>
<h2 id="一般权限和运行时权限"><a href="#一般权限和运行时权限" class="headerlink" title="一般权限和运行时权限"></a>一般权限和运行时权限</h2><p>Android6.0(Api23) 推出了很多新的特性，提高了用户的体验，让用户更加容易控制自己的隐私，我们知道在6.0以下的权限是在安装app的时候会弹出一个权限列表，用户只有在同意之后才能完成app安装，这样我要使用这个app 必须默认授权一些不必要的权限(如访问通讯录)。而6.0以后如果涉及到隐私的时候需要用户进行授权才能访问比如访问摄像机，读取sd卡等，这就是运行时权限；相反不涉及用户隐私，是不需要用户进行授权的这是一般权限比如访问网络，震动等。 </p>
<p>官方文档：<a href="https://developer.android.com/about/versions/marshmallow/android-6.0.html" target="_blank" rel="external">https://developer.android.com/about/versions/marshmallow/android-6.0.html </a></p>
<p><strong>运行时权限如下：</strong></p>
<ul>
<li>android.permission.READ_CALENDAR</li>
<li>android.permission.WRITE_CALENDAR</li>
<li>android.permission.CAMERA</li>
<li>android.permission.READ_CONTACTS</li>
<li>android.permission.WRITE_CONTACTS</li>
<li>android.permission.GET_ACCOUNTS</li>
<li>android.permission.ACCESS_FINE_LOACTION</li>
<li>android.permission.ACCESS_COARSE_LOCATION</li>
<li>android.permission.RECORD_AUDIO</li>
<li>android.permission.READ_PHONE_STATE</li>
<li>android.permission.CALL_PHONE</li>
<li>android.permission.READ_CALL_LOG</li>
<li>android.permission.WRITE_CALL_LOG</li>
<li>com.android.voicemail.permission.ADD_VOICEMAIL</li>
<li>android.permission.USE_SIP</li>
<li>android.permission.PROCESS_OUTGOING_CALLS</li>
<li>android.permission.BODY_SENSORS</li>
<li>android.permission.SEND_SMS</li>
<li>android.permission.RECEIVE_SMS</li>
<li>android.permission.READ_SMS</li>
<li>android.permission.RECEIVE_WAP_PUSH</li>
<li>android.permission.RECEIVE_MMS</li>
<li>android.permission.READ_CELL_BROADCASTS</li>
<li>android.permission.READ_EXTERNAL_STORAGE</li>
<li>android.permission.WRITE_EXTERNAL_STORAGE</li>
<li><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2></li>
</ul>
<h3 id="添加权限"><a href="#添加权限" class="headerlink" title="添加权限"></a>添加权限</h3><p>AndroidManifest中, 添加权限，一般权限访问网络默认为已授权，运行时权限必须手动授权</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--运行时权限  访问摄像头和本地存储--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.CAMERA"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 一般权限  访问网络--&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h3 id="检测工具类"><a href="#检测工具类" class="headerlink" title="检测工具类"></a>检测工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">deniedPermission</span><span class="params">(String permission)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ContextCompat.checkSelfPermission(mContext,permission)== PackageManager.PERMISSION_DENIED;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ContextCompat.checkSelfPermission方法是用于检测某个权限是否已经被授予，返回值<br>PackageManager.PERMISSION_DENIED 未授权<br>PackageManager.PERMISSION_GRANTED 授权</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 检查权限的工具类</div><div class="line"> */</div><div class="line">public class PermissionsChecker &#123;</div><div class="line">    private  Context mContext;</div><div class="line"></div><div class="line">    public PermissionsChecker(Context context)&#123;</div><div class="line">        mContext = context.getApplicationContext();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 判断权限</div><div class="line">     */</div><div class="line">    public boolean judgePermissions(String...permissions)&#123;</div><div class="line">        for(String permission:permissions)&#123;</div><div class="line">            if(deniedPermission(permission))&#123;</div><div class="line">                return true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 判断是否缺少权限</div><div class="line">     * PackageManager.PERMISSION_GRANTED 授予权限</div><div class="line">     * PackageManager.PERMISSION_DENIED 缺少权限</div><div class="line">     *</div><div class="line">     */</div><div class="line">    private boolean deniedPermission(String permission)&#123;</div><div class="line">        return ContextCompat.checkSelfPermission(mContext,permission) == PackageManager.PERMISSION_DENIED;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 6.0 运行权限处理</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_CODE = <span class="number">0</span>; <span class="comment">// 请求码</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isRequireCheck; <span class="comment">// 是否需要系统权限检测</span></div><div class="line">    <span class="comment">//危险权限（运行时权限）</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String[] PERMISSIONS = <span class="keyword">new</span> String[]&#123;</div><div class="line">            Manifest.permission.CAMERA,</div><div class="line">            Manifest.permission.WRITE_EXTERNAL_STORAGE,</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">private</span> PermissionsChecker mPermissionsChecker;<span class="comment">//检查权限</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PERMISSION_REQUEST_CODE = <span class="number">0</span>;        <span class="comment">// 系统权限返回码</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGE_URL_SCHEME = <span class="string">"package:"</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mPermissionsChecker = <span class="keyword">new</span> PermissionsChecker(<span class="keyword">this</span>);</div><div class="line">        isRequireCheck = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        <span class="keyword">if</span> (isRequireCheck) &#123;</div><div class="line">        <span class="comment">//权限没有授权，进入授权界面</span></div><div class="line">            <span class="keyword">if</span>(mPermissionsChecker.judgePermissions(PERMISSIONS))&#123;</div><div class="line">                ActivityCompat.requestPermissions(<span class="keyword">this</span>, PERMISSIONS, PERMISSION_REQUEST_CODE);</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            isRequireCheck = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 用户权限处理,</div><div class="line">     * 如果全部获取, 则直接过.</div><div class="line">     * 如果权限缺失, 则提示Dialog.</div><div class="line">     * <span class="doctag">@param</span> requestCode  请求码</div><div class="line">     * <span class="doctag">@param</span> permissions  权限</div><div class="line">     * <span class="doctag">@param</span> grantResults 结果</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode,  String[] permissions,  <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (requestCode == PERMISSION_REQUEST_CODE &amp;&amp; hasAllPermissionsGranted(grantResults)) &#123;</div><div class="line">            isRequireCheck = <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            isRequireCheck = <span class="keyword">false</span>;</div><div class="line">            showPermissionDialog();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 含有全部的权限</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasAllPermissionsGranted</span><span class="params">( <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> grantResult : grantResults) &#123;</div><div class="line">            <span class="keyword">if</span> (grantResult == PackageManager.PERMISSION_DENIED) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 提示对话框</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showPermissionDialog</span><span class="params">()</span> </span>&#123;</div><div class="line">        AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(MainActivity.<span class="keyword">this</span>);</div><div class="line">        builder.setTitle(<span class="string">"帮助"</span>);</div><div class="line">        builder.setMessage(<span class="string">"当前应用缺少必要权限。请点击\"设置\"-打开所需权限。"</span>);</div><div class="line">        <span class="comment">// 拒绝, 退出应用</span></div><div class="line">        builder.setNegativeButton(<span class="string">"退出"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line"><span class="comment">//                setResult(PERMISSIONS_DENIED);</span></div><div class="line">                finish();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        builder.setPositiveButton(<span class="string">"设置"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                startAppSettings();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        builder.setCancelable(<span class="keyword">false</span>);</div><div class="line">        builder.show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 启动应用的设置</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startAppSettings</span><span class="params">()</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);</div><div class="line">        intent.setData(Uri.parse(PACKAGE_URL_SCHEME + getPackageName()));</div><div class="line">        startActivity(intent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着Android6.0+系统的普及，越来越的项目会遇到权限上的问题，起初以为是个例、是机型的问题，后来遇到的次数多了，才逐步的意识到可能是系统做出了修改。本文将尝试对运行时权限做一定的总结。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://atwinner.github.io/categories/Android/"/>
    
    
      <category term="权限" scheme="https://atwinner.github.io/tags/%E6%9D%83%E9%99%90/"/>
    
  </entry>
  
  <entry>
    <title>UnionPay</title>
    <link href="https://atwinner.github.io/2016/12/28/UnionPay/"/>
    <id>https://atwinner.github.io/2016/12/28/UnionPay/</id>
    <published>2016-12-28T03:01:53.000Z</published>
    <updated>2016-12-28T03:01:53.935Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android滑动到顶部悬停</title>
    <link href="https://atwinner.github.io/2016/12/27/top-hover/"/>
    <id>https://atwinner.github.io/2016/12/27/top-hover/</id>
    <published>2016-12-27T02:42:56.000Z</published>
    <updated>2016-12-28T01:09:15.759Z</updated>
    
    <content type="html"><![CDATA[<p>开发的过程中，会遇到一些不好解决的问题，列表太多会导致滑动事件的冲突，下图中的情况中就是一个很典型的案例。</p>
<a id="more"></a>
<p><img src="/img/CoordinatorLayout/Android_CoordinatorLayout.png" alt="UI"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>要保证这个页面能正常显示，需要顶部的内容整体一起滑动上去，这样才能尽可能的扩大商品信息的展示面积，这也是有效信息。底部的双列表类似于<strong>饿了么</strong>的点餐界面。如果贸然使用ScrollView嵌套ListView的话，会导致ListView反复计算高度，导致内容错乱，进而影响页面效率的问题发生。因此需要寻找其他方式解决这个问题。</p>
<h2 id="CoordinatorLayout"><a href="#CoordinatorLayout" class="headerlink" title="CoordinatorLayout"></a>CoordinatorLayout</h2><p>CoordinatorLayout是Google在com.android.support:design中封装的一个控件，其主要实现的效果需要配合ToolBar和AppBarLayout，由于ToolBar的可控性太低，因此在这里不使用ToolBar，使用LinearLayout放在屏幕顶部悬浮即可。</p>
<p><img src="/img/CoordinatorLayout/collapsing.gif" alt="CoordinatorLayout"></p>
<p>另外，由于底部显示的是结构有些复杂，因此将其他信息中的网页和店铺商品中的双列表分别放在两个Fragment中，用ViewPager统一显示。这样，可以尽可能避免事件冲突，并且还可以保持代码整洁。</p>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h3 id="activity的布局文件"><a href="#activity的布局文件" class="headerlink" title="activity的布局文件"></a>activity的布局文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"50dp"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@color/main_green"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"供货商详情"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"@color/white"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"@dimen/textsize_9"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">        <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">        <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@color/white"</span></div><div class="line">            <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/collapsing_toolbar_layout"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">app:contentScrim</span>=<span class="string">"@color/white"</span></div><div class="line">                <span class="attr">app:expandedTitleMarginStart</span>=<span class="string">"48dp"</span></div><div class="line">                <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed"</span>&gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/frameLayout"</span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                    <span class="attr">app:layout_collapseMode</span>=<span class="string">"parallax"</span></div><div class="line">                    <span class="attr">app:layout_collapseParallaxMultiplier</span>=<span class="string">"0.8"</span>&gt;</div><div class="line"></div><div class="line">                    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                        <span class="attr">android:text</span>=<span class="string">"123321\n123321\n123321\n123321\n123321\n123321\n123321\n123321\n123321\n"</span> /&gt;</div><div class="line">                <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"50dp"</span></div><div class="line">                <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/txtOtherInfo"</span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                    <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">                    <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">                    <span class="attr">android:text</span>=<span class="string">"其他信息"</span> /&gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/txtShopGoods"</span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                    <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">                    <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">                    <span class="attr">android:text</span>=<span class="string">"店铺商品"</span> /&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">View</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"0.5dp"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@color/grey_line"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/viewPager"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@color/white"</span></div><div class="line">            <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="左侧fragment布局"><a href="#左侧fragment布局" class="headerlink" title="左侧fragment布局"></a>左侧fragment布局</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.NestedScrollView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">WebView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/webView"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.NestedScrollView</span>&gt;</span></div></pre></td></tr></table></figure>
<p>原生的WebView 外面要加一层NestedScrollView，以便让外部的CoordinatorLayout获取滑动事件的监听，另外WebView的android:layout_height要设置为”match_parent”，否则网页中的返回顶部和到达底部等功能可能都无法使用了。</p>
<h3 id="右侧fragment布局"><a href="#右侧fragment布局" class="headerlink" title="右侧fragment布局"></a>右侧fragment布局</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">View</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@color/black_light"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/recyclerView"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Activity代码"><a href="#Activity代码" class="headerlink" title="Activity代码"></a>Activity代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollapsingToolbarLayoutActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> TextView txtOtherInfo, txtShopGoods;</div><div class="line">    <span class="keyword">private</span> ViewPager viewPager;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        setContentView(R.layout.activity_collapsing);</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        txtOtherInfo = (TextView) findViewById(R.id.txtOtherInfo);</div><div class="line">        txtShopGoods = (TextView) findViewById(R.id.txtShopGoods);</div><div class="line">        txtOtherInfo.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                viewPager.setCurrentItem(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        txtShopGoods.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                viewPager.setCurrentItem(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        viewPager = (ViewPager) findViewById(R.id.viewPager);</div><div class="line">        viewPager.setAdapter(<span class="keyword">new</span> ViewPagerAdapter(getSupportFragmentManager()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewPagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewPagerAdapter</span><span class="params">(FragmentManager fm)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(fm);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (position) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                    <span class="keyword">return</span> WebViewFragment.getInstance();</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="keyword">return</span> ShopGoodsListFragment.getInstance();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ShopGoodsListFragment代码"><a href="#ShopGoodsListFragment代码" class="headerlink" title="ShopGoodsListFragment代码"></a>ShopGoodsListFragment代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShopGoodsListFragment</span> <span class="keyword">extends</span> <span class="title">MyFragment</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShopGoodsListFragment</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ShopGoodsListFragment <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShopGoodsListFragment();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> MyActivity activity;</div><div class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        setContentView(R.layout.fragment_shop_goods);</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        </div><div class="line">        recyclerView = (RecyclerView) findViewById(R.id.recyclerView);</div><div class="line">        recyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(activity));</div><div class="line">        recyclerView.setAdapter(<span class="keyword">new</span> MyRecyclerAdapter(activity));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRecyclerAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">MyRecyclerAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">private</span> Context context;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyRecyclerAdapter</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.context = context;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">            View view = LayoutInflater.from(context).inflate(R.layout.recycleritem_goods, <span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(view);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">50</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>(itemView);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="WebViewFragment代码"><a href="#WebViewFragment代码" class="headerlink" title="WebViewFragment代码"></a>WebViewFragment代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebViewFragment</span> <span class="keyword">extends</span> <span class="title">MyFragment</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebViewFragment</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WebViewFragment <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebViewFragment();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        setContentView(R.layout.fragment_viewpager);</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        HemaWebView webView = (HemaWebView) findViewById(R.id.webView);</div><div class="line">        webView.loadUrl(<span class="string">"https://atwinner.github.io/2016/12/27/top-hover/"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/img/CoordinatorLayout/CoordinatorLayout.gif" alt="CoordinatorLayout"></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>由于时间仓促，没有将UI的内容100%的还原，但是代码中已经可以看到雏形，可以实现上下左右共存的滑动事件，并且展示复杂列表数据。可见com.android.support:design中给出的控件还是非常强大的，值得研究。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发的过程中，会遇到一些不好解决的问题，列表太多会导致滑动事件的冲突，下图中的情况中就是一个很典型的案例。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://atwinner.github.io/categories/Android/"/>
    
    
      <category term="CoordinatorLayout" scheme="https://atwinner.github.io/tags/CoordinatorLayout/"/>
    
      <category term="MaterialDesign" scheme="https://atwinner.github.io/tags/MaterialDesign/"/>
    
  </entry>
  
  <entry>
    <title>Hexo设置标签</title>
    <link href="https://atwinner.github.io/2016/12/20/SetTag/"/>
    <id>https://atwinner.github.io/2016/12/20/SetTag/</id>
    <published>2016-12-20T09:59:14.000Z</published>
    <updated>2016-12-26T06:42:26.731Z</updated>
    
    <content type="html"><![CDATA[<p>搭建完个人博客之后，就难免需要对文章进行分类，使用categories和tags进行分类是个不错的选择，而且可以很方便的通过选择标签来筛选不同的文章。<strong>但是</strong>，搜索的文章中看了好几遍都难以理解，捯饬成功之后，分享一下操作流程。</p>
<a id="more"></a>
<h2 id="打开tagcloud"><a href="#打开tagcloud" class="headerlink" title="打开tagcloud"></a>打开tagcloud</h2><p>一般的主题下都会支持tagcloud（标签云），已Yelee主题为例，在主题的_config.yml配置文件中打开标签云，修改如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tagcloud: <span class="literal">true</span></div></pre></td></tr></table></figure>
<h2 id="配置标签所在目录"><a href="#配置标签所在目录" class="headerlink" title="配置标签所在目录"></a>配置标签所在目录</h2><p>在Yelee主题下的_config.yml中，可以修改如下内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  主页: /</div><div class="line">  所有文章: /archives/</div><div class="line">  <span class="comment">#随笔: /tags/随笔</span></div><div class="line">  标签云: /tags/</div><div class="line">  关于我: /about/</div></pre></td></tr></table></figure>
<p>其中，/tags/即展示标签的目录，在默认的情况下，这个目录是不存在的，需要我们手动创建，执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page tags</div></pre></td></tr></table></figure>
<p>这样会在sources文件夹中创建一个tags文件夹，在tags文件夹中有index.md，<strong>只需要在这个文件中修改名字，内容保持为空即可</strong>。</p>
<h2 id="在博客中添加分类和标签"><a href="#在博客中添加分类和标签" class="headerlink" title="在博客中添加分类和标签"></a>在博客中添加分类和标签</h2><p>示例如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 我是title</div><div class="line">date: 2016-12-15 12:00:00</div><div class="line">categories: Android</div><div class="line">tags: [MarsDaemon]</div><div class="line">---</div></pre></td></tr></table></figure>
<ul>
<li>categories 中放的是文章的分类，</li>
<li>tags 中放的是文章的标签</li>
<li>也可以配置多个标签，tags: [tag1, tag2, tag3]</li>
</ul>
<p>效果还是不错的</p>
<p><img src="/img/image_tag.png" alt="标签、分类效果"><br><img src="/img/tag_cloud.png" alt="我的标签云效果"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭建完个人博客之后，就难免需要对文章进行分类，使用categories和tags进行分类是个不错的选择，而且可以很方便的通过选择标签来筛选不同的文章。&lt;strong&gt;但是&lt;/strong&gt;，搜索的文章中看了好几遍都难以理解，捯饬成功之后，分享一下操作流程。&lt;/p&gt;
    
    </summary>
    
      <category term="小工具" scheme="https://atwinner.github.io/categories/%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Hexo" scheme="https://atwinner.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用Github+Hexo搭建私人博客</title>
    <link href="https://atwinner.github.io/2016/12/15/GithubPagesHexo/"/>
    <id>https://atwinner.github.io/2016/12/15/GithubPagesHexo/</id>
    <published>2016-12-15T04:00:00.000Z</published>
    <updated>2016-12-20T09:10:06.469Z</updated>
    
    <content type="html"><![CDATA[<p>在一次偶然的机会中，发现了有人演示的个人博客很漂亮，域名就是xxxx.github.io，遂生出了研究一下使用Github建立个人博客的念头，本质上的原理还是用Github托管了静态网页的源代码，并将其显示在前端。</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>身为一名程序猿，记录自己的成长是至关重要的，而写博客是一种比较好的记录方式。你可以选择博客园、开源中国、简书等等，当然自己搭建一个博客站点也是可以的。本篇文章将会手把手的教你使用Github+Hexo搭建属于自己的博客，不需要自己搭建服务器，可以任意编辑内容和主题，简直爽歪歪了。</p>
<h2 id="关于Github"><a href="#关于Github" class="headerlink" title="关于Github"></a>关于Github</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>GitHub是基于git实现的代码托管。git可能是目前最好用的版本控制系统了，非常受欢迎。</li>
<li>GitHub可以免费使用，并且快速稳定。</li>
<li>Github上面的世界很精彩，用久了你的眼界会开阔很多。<h3 id="为什么要使用Github-Pages"><a href="#为什么要使用Github-Pages" class="headerlink" title="为什么要使用Github Pages"></a>为什么要使用Github Pages</h3></li>
<li>可以绑定你的域名(但暂时貌似只能绑定一个)。</li>
<li>简单快捷，使用Github Pages可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。</li>
</ul>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>在 Windows 环境下安装 <a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a>非常简单，仅须到官网下载安装文件并执行即可完成安装。<br><img src="http://oi9a3yd8k.bkt.clouddn.com/node_js.png" alt="安装Node.js"></p>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><ul>
<li>下载msysgit 安装即可</li>
<li>安装教程：<a href="http://jingyan.baidu.com/article/90895e0fb3495f64ed6b0b50.html" target="_blank" rel="external">如何在windows下安装GIT</a></li>
<li>Git入门教程：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="external">看廖雪峰大神就好</a></li>
</ul>
<h2 id="HEXO"><a href="#HEXO" class="headerlink" title="HEXO"></a>HEXO</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><p>再项目目录的文件夹下右键鼠标，点击Git Bash Here，输入npm命令即可安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>
<h3 id="Hexo初始化配置"><a href="#Hexo初始化配置" class="headerlink" title="Hexo初始化配置"></a>Hexo初始化配置</h3><p>安装完成后，根据自己建好的目录，执行以下操作。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div><div class="line">$ npm install</div></pre></td></tr></table></figure></p>
<p>安装 Hexo 完成后，文件目录显示如下<br><img src="http://oi9a3yd8k.bkt.clouddn.com/hexo_init.png" alt="Hexo安装完成"></p>
<h3 id="安装Hexo插件"><a href="#安装Hexo插件" class="headerlink" title="安装Hexo插件"></a>安装Hexo插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-index --save</div><div class="line">npm install hexo-generator-archive --save</div><div class="line">npm install hexo-generator-category --save</div><div class="line">npm install hexo-generator-tag --save</div><div class="line">npm install hexo-server --save</div><div class="line">npm install hexo-deployer-git --save</div><div class="line">npm install hexo-deployer-heroku --save</div><div class="line">npm install hexo-deployer-rsync --save</div><div class="line">npm install hexo-deployer-openshift --save</div><div class="line">npm install hexo-renderer-marked@0.2 --save</div><div class="line">npm install hexo-renderer-stylus@0.2 --save</div><div class="line">npm install hexo-generator-feed@1 --save</div><div class="line">npm install hexo-generator-sitemap@1 --save</div></pre></td></tr></table></figure>
<h3 id="本地查看效果"><a href="#本地查看效果" class="headerlink" title="本地查看效果"></a>本地查看效果</h3><p>执行下面语句，执行完即可登录localhost:4000查看效果</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo server</div></pre></td></tr></table></figure>
<p><img src="http://oi9a3yd8k.bkt.clouddn.com/generate.png" alt="执行效果"></p>
<p>localhost:4000 效果展示<br><img src="http://oi9a3yd8k.bkt.clouddn.com/hexo_first_page.png" alt="执行效果"><br>至此，Hexo咋本地的环境搭建就完成了。</p>
<h2 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h2><h3 id="注册Github账户"><a href="#注册Github账户" class="headerlink" title="注册Github账户"></a>注册Github账户</h3><p>略过</p>
<h3 id="New-repository"><a href="#New-repository" class="headerlink" title="New repository"></a>New repository</h3><p>注册完成之后登录点击new repository<br><a href="http://oi9a3yd8k.bkt.clouddn.com/github_new_reponsitory.png" target="_blank" rel="external">新建</a></p>
<h3 id="配置SSH密钥"><a href="#配置SSH密钥" class="headerlink" title="配置SSH密钥"></a>配置SSH密钥</h3><p>配置Github的SSH密钥可以让本地git项目与远程的github建立链接，让我们在本地写了代码之后直接通过git操作就可以实现本地代码库与Github代码库同步。操作如下：</p>
<h4 id="查看是否存在SSH密钥"><a href="#查看是否存在SSH密钥" class="headerlink" title="查看是否存在SSH密钥"></a>查看是否存在SSH密钥</h4><p>打开Git Bush，并执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/. ssh</div></pre></td></tr></table></figure>
<p>这是检查User目录下是否存在.ssh目录<br><strong>如果不存在目录则执行如下操作</strong></p>
<h4 id="创建SSH密钥并在Github账户中添加"><a href="#创建SSH密钥并在Github账户中添加" class="headerlink" title="创建SSH密钥并在Github账户中添加"></a>创建SSH密钥并在Github账户中添加</h4><h5 id="创建SSH密钥"><a href="#创建SSH密钥" class="headerlink" title="创建SSH密钥"></a>创建SSH密钥</h5><p>打开Git Bush，并执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ssh -keygen -t rsa -C <span class="string">"your_email@example.com"</span></div><div class="line"><span class="comment">#这将按照你提供的邮箱地址，创建一对密钥</span></div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</div></pre></td></tr></table></figure>
<p>直接回车，则将密钥按默认文件进行存储。此时也可以输入特定的文件名，比如/c/Users/you/.ssh/github_rsa</p>
<p>接着，根据提示，你需要输入密码和确认密码（说到这里，如果你很放心，其实可以不用密码，就是到输密码的地方，都直接回车，所以每次push就只管回车就行了。所谓的最安全的密码，就是没有密码 哈哈）。相关提示如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): [Type a passphrase]</div><div class="line">Enter same passphrase again: [Type passphrase again]</div></pre></td></tr></table></figure>
<p>输入完成之后，屏幕会显示如下信息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/you/.ssh/id_rsa.</div><div class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/you/.ssh/id_rsa.pub.</div><div class="line">The key fingerprint is:</div><div class="line">01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</div></pre></td></tr></table></figure>
<h5 id="在Github账户中密钥"><a href="#在Github账户中密钥" class="headerlink" title="在Github账户中密钥"></a>在Github账户中密钥</h5><ul>
<li>配置密钥</li>
</ul>
<p><img src="http://oi9a3yd8k.bkt.clouddn.com/ssh1.png" alt="ssh"><br><img src="http://oi9a3yd8k.bkt.clouddn.com/ssh3.png" alt="ssh"><br><img src="http://oi9a3yd8k.bkt.clouddn.com/ssh2.png" alt="ssh"></p>
<ul>
<li>测试</li>
</ul>
<p>可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure>
<p>如果是下面的反馈：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The authenticity of host <span class="string">'github.com (207.97.227.239)'</span> can<span class="string">'t be established.</span></div><div class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</div><div class="line">Are you sure you want to continue connecting (yes/no)?</div></pre></td></tr></table></figure>
<p>输入yes即可</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi cnfeat! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></div></pre></td></tr></table></figure>
<h5 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h5><p>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。<br>Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。    </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"cnfeat"</span>//用户名</div><div class="line">git config --global user.email  <span class="string">"cnfeat@gmail.com"</span>//填写自己的邮箱</div></pre></td></tr></table></figure>
<h3 id="将本地的Hexo文件部署到Github"><a href="#将本地的Hexo文件部署到Github" class="headerlink" title="将本地的Hexo文件部署到Github"></a>将本地的Hexo文件部署到Github</h3><ul>
<li>登录Github，打开username.github.io的项目</li>
<li>复制https类型的地址</li>
<li>用记事本打开_config.yml文件</li>
<li>在配置文件中保存如下内容</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: https://github.com/Username/username.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<ul>
<li>在Hexo文件夹下执行</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g <span class="_">-d</span></div></pre></td></tr></table></figure>
<p>执行完之后会让你输入github的账号和密码，输入完后就可以登录我们自己的部署在Github Pages服务器上的博客了。</p>
<h2 id="使用皮肤"><a href="#使用皮肤" class="headerlink" title="使用皮肤"></a>使用皮肤</h2><p>为Hexo开发的主题有很多，你可以在<a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a>中找到。下面以我使用的Material主题为例。</p>
<h3 id="Clone主题"><a href="#Clone主题" class="headerlink" title="Clone主题"></a>Clone主题</h3><p>打开Hexo文件夹并执行Git Bash，执行命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/viosey/hexo-theme-material(此处地址替换成你需要使用的主题的地址) themes/hexo-theme-material</div></pre></td></tr></table></figure>
<h3 id="修改Hexo配置文件"><a href="#修改Hexo配置文件" class="headerlink" title="修改Hexo配置文件"></a>修改Hexo配置文件</h3><p>下载完成后，打开Hexo文件夹下的配置文件 <strong>_config.yml</strong><br>修改参数为:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: hexo-theme-material</div></pre></td></tr></table></figure>
<h3 id="重新部署到本地"><a href="#重新部署到本地" class="headerlink" title="重新部署到本地"></a>重新部署到本地</h3><h3 id="如果效果满意，将它部署到Github上"><a href="#如果效果满意，将它部署到Github上" class="headerlink" title="如果效果满意，将它部署到Github上"></a>如果效果满意，将它部署到Github上</h3><p>打开Hexo文件夹，右键Git Bash</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo clean (必须要，不然有时因为缓存问题，服务器更新不了主题)</div><div class="line">hexo g <span class="_">-d</span></div></pre></td></tr></table></figure>
<h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><p>Hexo的博文都是以*.md即markdown文件的形式统一管理在source_posts文件夹下面的<br>新增一篇博文只需要在此文件夹下新建一个md文件即可。</p>
<h3 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h3><p>Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。</p>
<p><strong>Markdown有什么优点？</strong></p>
<ul>
<li>专注你的文字内容而不是排版样式。</li>
<li>轻松的导出 HTML、PDF 和本身的 .md 文件。</li>
<li>纯文本内容，兼容所有的文本编辑器与字处理软件。</li>
<li>可读，直观。适合所有人的写作语言。</li>
</ul>
<p><strong>Markdown语法</strong></p>
<ul>
<li><a href="http://www.williamlong.info/archives/4319.html" target="_blank" rel="external">http://www.williamlong.info/archives/4319.html</a></li>
</ul>
<h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><ul>
<li><a href="http://www.williamlong.info/archives/4319.html" target="_blank" rel="external">http://www.williamlong.info/archives/4319.html</a></li>
</ul>
<p>END</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在一次偶然的机会中，发现了有人演示的个人博客很漂亮，域名就是xxxx.github.io，遂生出了研究一下使用Github建立个人博客的念头，本质上的原理还是用Github托管了静态网页的源代码，并将其显示在前端。&lt;/p&gt;
    
    </summary>
    
      <category term="小工具" scheme="https://atwinner.github.io/categories/%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Hexo" scheme="https://atwinner.github.io/tags/Hexo/"/>
    
      <category term="Github Pages" scheme="https://atwinner.github.io/tags/Github-Pages/"/>
    
  </entry>
  
  <entry>
    <title>Android 使用MarsDaemon进程常驻</title>
    <link href="https://atwinner.github.io/2016/12/15/MarsDaemon/"/>
    <id>https://atwinner.github.io/2016/12/15/MarsDaemon/</id>
    <published>2016-12-15T04:00:00.000Z</published>
    <updated>2016-12-20T09:10:34.543Z</updated>
    
    <content type="html"><![CDATA[<p>在特定的业务场景中，我们可能会需要app在后台做一些事情，比如上传数据之类的操作，并且希望这种操作及时在程序退出之后依然可以继续进行。因此也就理所当然的想到了使用Service进行处理。<strong>但是</strong>，在特定条件（app进入后台+设备内存不足+进程占用的内存足够大）的情况下，Service会非常容易在几分钟内被系统干掉，因此提高Service的存活率至关重要。</p>
<a id="more"></a>
<h2 id="一种无效的做法"><a href="#一种无效的做法" class="headerlink" title="一种无效的做法"></a>一种无效的做法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    Log.e(TAG, <span class="string">"onDestory"</span>);</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, Service.class);</div><div class="line">    startService(intent);</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此方法企图利用Service是生命周期去调用其本身，事实证明这种方法是无效的，在进程被杀死时，Service根本不会执行onDestroy就被直接清出内存了，因此靠自身的力量提高存活率的方式也就不可行了。</p>
<h2 id="Marsdaemon"><a href="#Marsdaemon" class="headerlink" title="Marsdaemon"></a>Marsdaemon</h2><ul>
<li>项目地址：<a href="https://github.com/Marswin/MarsDaemon" target="_blank" rel="external">https://github.com/Marswin/MarsDaemon</a></li>
<li>原理分析：<a href="http://blog.csdn.net/marswin89/article/details/50917098" target="_blank" rel="external">http://blog.csdn.net/marswin89/article/details/50917098</a><br>下面主要讲讲用法</li>
</ul>
<h3 id="从Github获取项目源码"><a href="#从Github获取项目源码" class="headerlink" title="从Github获取项目源码"></a>从<a href="https://github.com/Marswin/MarsDaemon" target="_blank" rel="external">Github</a>获取项目源码</h3><p>导入项目之后<br><img src="http://oi9a3yd8k.bkt.clouddn.com/lib_marsdaemon.png" alt="项目目录"><br>之后不要忘记导入module<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">'*.jar'</span>], dir: <span class="string">'libs'</span>)</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    <span class="keyword">compile</span> <span class="keyword">project</span>(<span class="string">':LibMarsdaemon'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="使用Marsdaemon"><a href="#使用Marsdaemon" class="headerlink" title="使用Marsdaemon"></a>使用Marsdaemon</h3><h4 id="在manifest中声明2个进程分别包含一个Service和一个Receiver"><a href="#在manifest中声明2个进程分别包含一个Service和一个Receiver" class="headerlink" title="在manifest中声明2个进程分别包含一个Service和一个Receiver"></a>在manifest中声明2个进程分别包含一个Service和一个Receiver</h4><p>此处将process1作为主要进程，process2作为守护进程。MainService中执行主要的业务逻辑，Receiver1、GuardService、Receiver2都是额外创建的，里面不要做任何事情，都是空实现就好。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--守护进程--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">service</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">".ble.MainService"</span></div><div class="line">    <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:exported</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:process</span>=<span class="string">":process1"</span> /&gt;</div><div class="line"><span class="tag">&lt;<span class="name">receiver</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">".guard.Receiver1"</span></div><div class="line">    <span class="attr">android:process</span>=<span class="string">":process1"</span> /&gt;</div><div class="line"><span class="tag">&lt;<span class="name">service</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">".guard.GuardService"</span></div><div class="line">    <span class="attr">android:process</span>=<span class="string">":process2"</span> /&gt;</div><div class="line"><span class="tag">&lt;<span class="name">receiver</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">".guard.Receiver2"</span></div><div class="line">    <span class="attr">android:process</span>=<span class="string">":process2"</span> /&gt;</div></pre></td></tr></table></figure></p>
<h4 id="处理Application"><a href="#处理Application" class="headerlink" title="处理Application"></a>处理Application</h4><p>由于我们的Application一般都会集成其他的Application，因此需要在attachBaseContext中初始化DaemonClient，然后调用onAttachBaseContext即可实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">XXXApplication</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> DaemonClient daemonClient;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.attachBaseContext(base);</div><div class="line">        daemonClient = <span class="keyword">new</span> DaemonClient(getDaemonConfigurations());</div><div class="line">        daemonClient.onAttachBaseContext(base);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> DaemonConfigurations <span class="title">getDaemonConfigurations</span><span class="params">()</span> </span>&#123;</div><div class="line">        DaemonConfigurations.DaemonConfiguration configuration1 = </div><div class="line">        <span class="keyword">new</span> DaemonConfigurations.DaemonConfiguration(</div><div class="line">                <span class="string">"com.hemaapp.znsh:process1"</span>,</div><div class="line">                MainService.class.getCanonicalName(),</div><div class="line">                Receiver1.class.getCanonicalName());</div><div class="line"></div><div class="line">        DaemonConfigurations.DaemonConfiguration configuration2 = </div><div class="line">        <span class="keyword">new</span> DaemonConfigurations.DaemonConfiguration(</div><div class="line">                <span class="string">"com.hemaapp.znsh:process2"</span>,</div><div class="line">                GuardService.class.getCanonicalName(),</div><div class="line">                Receiver2.class.getCanonicalName());</div><div class="line"></div><div class="line">        DaemonConfigurations.DaemonListener listener = <span class="keyword">new</span> MyDaemonListener();</div><div class="line">        <span class="comment">/*return new DaemonConfigurations(configuration1, configuration2);listener可以是null*/</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DaemonConfigurations(configuration1, configuration2, listener);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDaemonListener</span> <span class="keyword">implements</span> <span class="title">DaemonConfigurations</span>.<span class="title">DaemonListener</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPersistentStart</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDaemonAssistantStart</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onWatchDaemonDaed</span><span class="params">()</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="处理其他Class"><a href="#处理其他Class" class="headerlink" title="处理其他Class"></a>处理其他Class</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuardService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Service.START_NOT_STICKY;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver1</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver2</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="在Android4-4中"><a href="#在Android4-4中" class="headerlink" title="在Android4.4中"></a>在Android4.4中</h4><ul>
<li>手动Kill进程时，可以明显的在LogCat中看到Service被重新启动了，提高的Service的存活率。<h4 id="在Android5-中"><a href="#在Android5-中" class="headerlink" title="在Android5+中"></a>在Android5+中</h4></li>
<li>手动Kill进程时，Service不会被重新启动，Application依旧被彻底杀死了。</li>
<li>小米2+Android5.0，长时间后台运行测试中，可以连续半小时以上不间断发送网络请求，效果明显。</li>
<li>其他主流手机，由于大多配置了2G以上的内存，因此暂时没有看到Service被清理的现象发生。</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>使用Marsdaemon提高Service存活率的方式虽然有一定效果，但是在Android5.0之后的版本中，并不可靠，并且还有如下几个缺陷。</p>
<ul>
<li>即使Service存活，Application中的信息不一定全部存在，这就会导致发送网络请求失败的情况发生，做了无用功。</li>
<li>营造了一个恶劣的运行环境，这种方式也是Android所不提倡的。</li>
</ul>
<p>因此，Marsdaemon不应是大家频繁使用的功能，特殊情况下可以应急即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在特定的业务场景中，我们可能会需要app在后台做一些事情，比如上传数据之类的操作，并且希望这种操作及时在程序退出之后依然可以继续进行。因此也就理所当然的想到了使用Service进行处理。&lt;strong&gt;但是&lt;/strong&gt;，在特定条件（app进入后台+设备内存不足+进程占用的内存足够大）的情况下，Service会非常容易在几分钟内被系统干掉，因此提高Service的存活率至关重要。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://atwinner.github.io/categories/Android/"/>
    
    
      <category term="MarsDaemon" scheme="https://atwinner.github.io/tags/MarsDaemon/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://atwinner.github.io/2016/12/14/hello-world/"/>
    <id>https://atwinner.github.io/2016/12/14/hello-world/</id>
    <published>2016-12-14T04:00:00.000Z</published>
    <updated>2017-01-23T02:21:37.846Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
